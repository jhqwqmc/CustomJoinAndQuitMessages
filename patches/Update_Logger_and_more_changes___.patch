Index: CustomJoinAndQuitMessagesOld/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/pom.xml b/CustomJoinAndQuitMessagesOld/pom.xml
--- a/CustomJoinAndQuitMessagesOld/pom.xml	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/pom.xml	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -9,7 +9,7 @@
     </parent>
 
     <artifactId>CustomJoinAndQuitMessagesOld</artifactId>
-    <version>1.7.9-release</version>
+    <version>1.7.10-beta</version>
 
     <properties>
         <java.version>8</java.version>
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -6,12 +6,13 @@
 import jss.customjoinandquitmessages.config.Lang;
 import jss.customjoinandquitmessages.config.PlayerFile;
 import jss.customjoinandquitmessages.config.utils.PreConfigLoader;
-import jss.customjoinandquitmessages.listener.JoinListener;
+import jss.customjoinandquitmessages.listener.chat.JoinListener;
 import jss.customjoinandquitmessages.listener.TaskLoader;
+import jss.customjoinandquitmessages.listener.chat.QuitListener;
 import jss.customjoinandquitmessages.manager.HookManager;
-import jss.customjoinandquitmessages.manager.InventoryView;
+import jss.customjoinandquitmessages.utils.InventoryView;
 import jss.customjoinandquitmessages.update.UpdateChecker;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import org.bstats.bukkit.Metrics;
@@ -20,6 +21,7 @@
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.java.JavaPlugin;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
@@ -35,6 +37,7 @@
     private final ConfigFile configFile = new ConfigFile(this, "config.yml");
     private final HookManager hooksManager = new HookManager();
     private final PreConfigLoader preConfigLoader = new PreConfigLoader(this);
+    @SuppressWarnings("unused")
     private String updateVersion;
     private boolean useLegacyConfig = false;
     private ArrayList<InventoryView> inventoryViews;
@@ -45,7 +48,11 @@
         Util.sendLoadTitle(version);
         inventoryViews = new ArrayList<>();
 
-        //Util.createFolder(this,"Players");
+        File logDirectory = new File(getDataFolder(), "logs");
+        if (!logDirectory.exists()) {
+            //noinspection ResultOfMethodCallIgnored
+            logDirectory.mkdirs();
+        }
     }
 
     public void onEnable() {
@@ -67,7 +74,7 @@
         String cfg = getConfigFile().getConfig().getString("File-Version");
         boolean old_cfg = getConfigFile().getConfig().contains("Config.Config-Version");
         assert cfg != null;
-        if (!cfg.equals("3") || old_cfg) {
+        if (!cfg.equals("4") || old_cfg) {
             useLegacyConfig = true;
         }
 
@@ -85,7 +92,6 @@
 
         UpdateChecker updateChecker = new UpdateChecker(this);
         updateChecker.sendSpigotUpdate();
-        //updateChecker.sendGithubUpdate();
     }
 
     public void onDisable() {
@@ -101,6 +107,7 @@
 
     public void setupEvents() {
         new JoinListener();
+        new QuitListener();
         TaskLoader taskLoader = new TaskLoader(this);
         taskLoader.onUpdateGroup();
     }
@@ -114,7 +121,7 @@
     }
 
     public Lang Locale() {
-        return availableLangs.get(Settings.defaultLanguage);
+        return availableLangs.get(Settings.settings_defaultLanguage);
     }
 
     public void setAvailableLocales(HashMap<String, Lang> availableLangs) {
@@ -144,14 +151,6 @@
         }
     }
 
-    @SuppressWarnings({"SuspiciousListRemoveInLoop", "unused"})
-    public void unregisterInventory(Player player) {
-        for (int i = 0; i < inventoryViews.size(); i++) {
-            if (inventoryViews.get(i).getPlayer().getName().equals(player.getName())) {
-                inventoryViews.remove(i);
-            }
-        }
-    }
 
     public InventoryView getInventoryView(Player player) {
         for (InventoryView inventoryView : inventoryViews) {
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/Lang.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/Lang.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/Lang.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/Lang.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/Lang.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,7 @@
 package jss.customjoinandquitmessages.config;
 
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.configuration.file.YamlConfiguration;
@@ -10,6 +10,7 @@
 import java.util.List;
 import java.util.Locale;
 
+@SuppressWarnings("all")
 public class Lang {
 
     public String No_Permission;
@@ -22,7 +23,7 @@
     public String Error_Sound;
     public String error_null_group;
     private final CustomJoinAndQuitMessages plugin;
-    private FileConfiguration locale = null;
+    private FileConfiguration locale;
     private File localeFile = null;
     private final Locale localeObject;
     private final String localeName;
@@ -70,7 +71,7 @@
 
     private void loadLocale() {
         String main = "CustomJoinAndQuitMessage";
-        Settings.messages_prefix = locale.getString(main + ".Prefix");
+            Settings.messages_prefix = locale.getString(main + ".Prefix");
         Error_Cmd = locale.getString(main + ".Error-Cmd");
         Error_Console = locale.getString(main + ".Error-Console");
         Error_Sound = locale.getString(main + ".Sound-Error");
@@ -82,26 +83,4 @@
         error_null_group = locale.getString(main + ".Groups.NotFoundGroup");
     }
 
-    public String getLocaleName() {
-        return this.localeName;
-    }
-
-    public String getLanguageName() {
-        if (localeObject == null) {
-            return "unknown";
-        }
-        return localeObject.getDisplayLanguage(localeObject);
-    }
-
-    public String getCountryName() {
-        if (localeObject == null) {
-            return "unknown";
-        }
-        return localeObject.getDisplayCountry(localeObject);
-    }
-
-    public int getIndex() {
-        return index;
-    }
-
 }
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/PlayerFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/PlayerFile.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/PlayerFile.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/PlayerFile.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/PlayerFile.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -9,7 +9,6 @@
 import java.nio.charset.StandardCharsets;
 
 public class PlayerFile extends FileManager {
-
     private File file;
     private FileConfiguration config;
     private final String path;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/FileLister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/FileLister.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/FileLister.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/FileLister.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/FileLister.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,7 @@
 package jss.customjoinandquitmessages.config.utils;
 
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import org.bukkit.plugin.java.JavaPlugin;
 
 import java.io.File;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -2,7 +2,7 @@
 
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
 import jss.customjoinandquitmessages.config.Lang;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import org.bukkit.configuration.file.FileConfiguration;
@@ -25,8 +25,8 @@
 
             //Other
             Settings.settings_debug = config.getBoolean("Config.Debug");
-            Settings.update = Objects.equals(config.getString("Config.Update.Enabled"), "true");
-            Settings.c_type = config.getString("Config.Type");
+            Settings.settings_update = Objects.equals(config.getString("Config.Update.Enabled"), "true");
+            Settings.chatformat_type = config.getString("Config.Type");
             Settings.is_Group_Display = Objects.requireNonNull(config.getString("Config.Type")).equalsIgnoreCase("group");
 
             //Join
@@ -81,7 +81,7 @@
     }
 
     public boolean loadLangs() {
-        Settings.defaultLanguage = plugin.getConfig().getString("Config.Lang", "en_US");
+        Settings.settings_defaultLanguage = plugin.getConfig().getString("Config.Lang", "en_US");
         HashMap<String, Lang> availableLocales = new HashMap<>();
         FileLister fl = new FileLister();
         try {
@@ -92,10 +92,10 @@
         } catch (IOException e1) {
             plugin.getLogger().severe("Could not add locales!");
         }
-        if (!availableLocales.containsKey(Settings.defaultLanguage)) {
-            Logger.warning(Util.getPrefix(true) + "&eLoad File: " + Settings.defaultLanguage + ".yml' not found in /lang/ folder. Using /lang/en_US.yml");
-            Settings.defaultLanguage = "en_US";
-            availableLocales.put(Settings.defaultLanguage, new Lang(plugin, Settings.defaultLanguage, 0));
+        if (!availableLocales.containsKey(Settings.settings_defaultLanguage)) {
+            Logger.warning(Util.getPrefix(true) + "&eLoad File: " + Settings.settings_defaultLanguage + ".yml' not found in /lang/ folder. Using /lang/en_US.yml");
+            Settings.settings_defaultLanguage = "en_US";
+            availableLocales.put(Settings.settings_defaultLanguage, new Lang(plugin, Settings.settings_defaultLanguage, 0));
         }
         plugin.setAvailableLocales(availableLocales);
         return true;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,7 @@
 package jss.customjoinandquitmessages.hook;
 
 import jss.customjoinandquitmessages.utils.EventUtils;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import jss.customjoinandquitmessages.utils.interfaces.IHook;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,7 @@
 package jss.customjoinandquitmessages.hook;
 
 import jss.customjoinandquitmessages.utils.EventUtils;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import jss.customjoinandquitmessages.utils.interfaces.IHook;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXHook.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXHook.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXHook.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -3,7 +3,7 @@
 import com.earth2me.essentials.Essentials;
 import jss.customjoinandquitmessages.manager.HookManager;
 import jss.customjoinandquitmessages.utils.EventUtils;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import jss.customjoinandquitmessages.utils.interfaces.IHook;
@@ -12,7 +12,7 @@
 
 public class EssentialsXHook implements IHook {
 
-    private HookManager hookManager;
+    private final HookManager hookManager;
     private boolean isEnabled;
     private Essentials essentials;
 
@@ -47,7 +47,4 @@
         return isEnabled;
     }
 
-    public HookManager getHookManager() {
-        return hookManager;
-    }
 }
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,7 @@
 package jss.customjoinandquitmessages.hook;
 
 import jss.customjoinandquitmessages.utils.EventUtils;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import jss.customjoinandquitmessages.utils.interfaces.IHook;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/PlaceholderApiHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/PlaceholderApiHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/PlaceholderApiHook.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/PlaceholderApiHook.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/PlaceholderApiHook.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -2,14 +2,15 @@
 
 import jss.customjoinandquitmessages.manager.HookManager;
 import jss.customjoinandquitmessages.utils.EventUtils;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Util;
 import jss.customjoinandquitmessages.utils.interfaces.IHook;
 import org.bukkit.Bukkit;
 
 public class PlaceholderApiHook implements IHook {
 
-    private HookManager hooksManager;
+    @SuppressWarnings("unused")
+    private final HookManager hooksManager;
     private boolean isEnabled;
 
     public PlaceholderApiHook(HookManager hooksManager) {
@@ -31,8 +32,4 @@
         return this.isEnabled;
     }
 
-    public HookManager getHooksManager() {
-        return hooksManager;
-    }
-
 }
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/SuperVanishHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/SuperVanishHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/SuperVanishHook.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/SuperVanishHook.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/SuperVanishHook.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -2,7 +2,7 @@
 
 import de.myzelyam.api.vanish.VanishAPI;
 import jss.customjoinandquitmessages.utils.EventUtils;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Util;
 import jss.customjoinandquitmessages.utils.interfaces.IHook;
 import org.bukkit.Bukkit;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/InventoryListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/InventoryListener.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/InventoryListener.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/InventoryListener.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/InventoryListener.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -2,7 +2,7 @@
 
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
 import jss.customjoinandquitmessages.manager.DisplayManager;
-import jss.customjoinandquitmessages.manager.InventoryView;
+import jss.customjoinandquitmessages.utils.InventoryView;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Listener;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/TaskLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/TaskLoader.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/TaskLoader.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/TaskLoader.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/TaskLoader.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -4,7 +4,7 @@
 import jss.customjoinandquitmessages.hook.LuckPermsHook;
 import jss.customjoinandquitmessages.manager.HookManager;
 import jss.customjoinandquitmessages.manager.PlayerManager;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
@@ -26,7 +26,7 @@
         taskGroupId = scheduler.scheduleSyncRepeatingTask(plugin, () -> {
             LuckPermsHook luckPermsHook = HookManager.get().getLuckPermsHook();
 
-            if(Settings.c_type.equalsIgnoreCase("group")){
+            if(Settings.chatformat_type.equalsIgnoreCase("group")){
                 if (luckPermsHook.isEnabled() && Settings.hook_luckperms_autoUpdate_group) {
 
                     for (Player p : Bukkit.getOnlinePlayers()) {
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/JoinListener.java
rename from CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java
rename to CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/JoinListener.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/JoinListener.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,4 +1,4 @@
-package jss.customjoinandquitmessages.listener;
+package jss.customjoinandquitmessages.listener.chat;
 
 import com.cryptomorin.xseries.messages.ActionBar;
 import com.cryptomorin.xseries.messages.Titles;
@@ -10,7 +10,7 @@
 import jss.customjoinandquitmessages.manager.PlayerManager;
 import jss.customjoinandquitmessages.update.UpdateChecker;
 import jss.customjoinandquitmessages.utils.GroupHelper;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import org.bukkit.Bukkit;
@@ -22,7 +22,6 @@
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerJoinEvent;
-import org.bukkit.event.player.PlayerQuitEvent;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.List;
@@ -60,7 +59,7 @@
             Logger.debug(" &eLuckPermHook is: " + luckPermsHook.isEnabled());
         }
 
-        if (Settings.c_type.equalsIgnoreCase("group")){
+        if (Settings.chatformat_type.equalsIgnoreCase("group")){
             if (luckPermsHook.isEnabled()) {
                 if (!playerManager.getGroup(p).equalsIgnoreCase(Objects.requireNonNull(LuckPermsHook.getApi().
                         getUserManager().getUser(p.getName())).getPrimaryGroup())) {
@@ -72,9 +71,9 @@
             }
         }
 
-        boolean isNormal = Settings.c_type.equalsIgnoreCase("normal");
-        boolean isGroup = Settings.c_type.equalsIgnoreCase("group");
-        boolean isNone = Settings.c_type.equalsIgnoreCase("none");
+        boolean isNormal = Settings.chatformat_type.equalsIgnoreCase("normal");
+        boolean isGroup = Settings.chatformat_type.equalsIgnoreCase("group");
+        boolean isNone = Settings.chatformat_type.equalsIgnoreCase("none");
 
         if (Settings.welcome) {
             for (String text : Settings.list_welcome)
@@ -229,151 +228,11 @@
     @EventHandler(priority = EventPriority.HIGH)
     public void onUpdate(@NotNull PlayerJoinEvent e) {
         Player p = e.getPlayer();
-        if (Settings.update) {
+        if (Settings.settings_update) {
             if ((p.isOp()) || (p.hasPermission("cjm.update"))) {
                 new UpdateChecker(CustomJoinAndQuitMessages.get()).sendSpigotUpdate();
             }
         }
     }
 
-    @EventHandler(priority = EventPriority.HIGH)
-    public void onQuit(@NotNull PlayerQuitEvent e) {
-        FileConfiguration config = plugin.getConfigFile().getConfig();
-        Player p = e.getPlayer();
-
-        DiscordSRVHHook discordSRVHHook = HookManager.getInstance().getDiscordSRVHHook();
-        EssentialsXDiscordHook essentialsXDiscordHook = HookManager.getInstance().getEssentialsXDiscordHook();
-        EssentialsXHook essentialsXHook = HookManager.get().getEssentialsXHook();
-        SuperVanishHook superVanishHook = HookManager.get().getSuperVanishHook();
-        PlayerManager playerManager = new PlayerManager();
-
-        boolean isNormal = Settings.c_type.equalsIgnoreCase("normal");
-        boolean isGroup = Settings.c_type.equalsIgnoreCase("group");
-        boolean isNone = Settings.c_type.equalsIgnoreCase("none");
-
-        if(Util.isVanished(p)){
-            e.setQuitMessage(null);
-            return;
-        }
-
-        if (superVanishHook.isEnabled()){
-            if (superVanishHook.isVanishPlayer(p)){
-                e.setQuitMessage(null);
-                return;
-            }
-        }
-
-        if (essentialsXHook.isEnabled()) {
-            if (Settings.hook_essentials_hidePlayerVanish) {
-                if (essentialsXHook.isVanish(p)) {
-                    e.setQuitMessage(null);
-                    return;
-                }
-            }
-        }
-
-        if (Settings.quit) {
-            if (isNormal) {
-                e.setQuitMessage(null);
-
-                String text = config.getString("Quit.Text");
-
-                text = Util.color(text);
-                text = Util.getVar(p, text);
-
-                MessageBuilder messageBuilder = new MessageBuilder(p, text);
-
-                if (config.getBoolean("Config.Show-Chat-In-Console")) {
-                    Logger.info(messageBuilder.getText());
-                }
-
-                boolean isHover = config.getBoolean("Quit.HoverEvent.Enabled");
-                boolean isClick = config.getBoolean("Quit.ClickEvent.Enabled");
-                boolean isSound = config.getBoolean("Quit.Sound.Enabled");
-                boolean isSoundAll = config.getBoolean("Quit.Sound.Send-To-All");
-
-                List<String> Hover_Text = config.getStringList("Quit.HoverEvent.Hover");
-
-                String isClick_Mode = config.getString("Quit.ClickEvent.Mode");
-                String Action_Command = config.getString("Quit.ClickEvent.Actions.Command");
-                String Action_Url = config.getString("Quit.ClickEvent.Actions.Url");
-                String Action_Suggest = config.getString("Quit.ClickEvent.Actions.Suggest-Command");
-                String Sound_Name = config.getString("Quit.Sound.Name");
-
-                int Sound_Volume = config.getInt("Quit.Sound.Volume");
-                float Sound_Pitch = Float.parseFloat(Objects.requireNonNull(config.getString("Quit.Sound.Pitch")));
-
-                if (isHover) {
-                    if (isClick) {
-                        assert isClick_Mode != null;
-                        if (isClick_Mode.equalsIgnoreCase("command")) {
-                            messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
-                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
-                            messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
-                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
-                            messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
-                        }
-                    } else {
-                        messageBuilder.setHover(Hover_Text).sendToAll();
-                    }
-                } else {
-                    if (isClick) {
-                        assert isClick_Mode != null;
-                        if (isClick_Mode.equalsIgnoreCase("command")) {
-                            messageBuilder.setExecuteCommand(Action_Command).sendToAll();
-                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
-                            messageBuilder.setOpenURL(Action_Url).sendToAll();
-                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
-                            messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
-                        }
-                    } else {
-                        messageBuilder.sendToAll();
-                    }
-                }
-
-                if (discordSRVHHook.isEnabled()) {
-                    if (Settings.hook_discordSrv_channelId.equalsIgnoreCase("none"))
-                        return;
-
-                    DiscordUtil.sendMessageBlocking(
-                            DiscordUtil.getTextChannelById(Settings.hook_discordSrv_channelId),
-                            Util.colorless(messageBuilder.getText()));
-                }
-
-                if (essentialsXDiscordHook.isEnabled()) {
-                    if (Settings.hook_essentialsDiscord_channelId.equalsIgnoreCase("none"))
-                        return;
-
-                    essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelId,
-                            Util.colorless(messageBuilder.getText()));
-                }
-
-                try {
-                    if (isSound) {
-                        if (isSoundAll) {
-                            Location location = p.getLocation();
-                            p.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
-                        } else {
-                            for (Player pp : Bukkit.getOnlinePlayers()) {
-                                Location location = p.getLocation();
-                                pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
-                            }
-                        }
-                    }
-                } catch (Exception ex) {
-                    Logger.warning("&eVerify that the sound name is correct or belongs to the version");
-                }
-            } else if (isGroup) {
-                e.setQuitMessage(null);
-                GroupHelper groupHelper = GroupHelper.get();
-                groupHelper.setGroup(playerManager.getGroup(p));
-                groupHelper.setDiscord(discordSRVHHook);
-                groupHelper.setEssentials(essentialsXDiscordHook);
-                groupHelper.onQuit(p, config);
-            } else if (isNone) {
-                e.setQuitMessage(null);
-            }
-        }
-    }
-
 }
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/QuitListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/QuitListener.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/QuitListener.java
new file mode 100644
--- /dev/null	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/chat/QuitListener.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -0,0 +1,178 @@
+package jss.customjoinandquitmessages.listener.chat;
+
+import github.scarsz.discordsrv.util.DiscordUtil;
+import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
+import jss.customjoinandquitmessages.hook.DiscordSRVHHook;
+import jss.customjoinandquitmessages.hook.EssentialsXDiscordHook;
+import jss.customjoinandquitmessages.hook.EssentialsXHook;
+import jss.customjoinandquitmessages.hook.SuperVanishHook;
+import jss.customjoinandquitmessages.json.MessageBuilder;
+import jss.customjoinandquitmessages.manager.HookManager;
+import jss.customjoinandquitmessages.manager.PlayerManager;
+import jss.customjoinandquitmessages.utils.GroupHelper;
+import jss.customjoinandquitmessages.utils.logger.Logger;
+import jss.customjoinandquitmessages.utils.Settings;
+import jss.customjoinandquitmessages.utils.Util;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Sound;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+import java.util.Objects;
+
+public class QuitListener implements Listener {
+
+    private final CustomJoinAndQuitMessages plugin = CustomJoinAndQuitMessages.get();
+
+    public QuitListener() {
+        Bukkit.getPluginManager().registerEvents(this, plugin);
+    }
+
+    @EventHandler(priority = EventPriority.HIGH)
+    public void onQuit(@NotNull PlayerQuitEvent e) {
+        FileConfiguration config = plugin.getConfigFile().getConfig();
+        Player p = e.getPlayer();
+
+        DiscordSRVHHook discordSRVHHook = HookManager.getInstance().getDiscordSRVHHook();
+        EssentialsXDiscordHook essentialsXDiscordHook = HookManager.getInstance().getEssentialsXDiscordHook();
+        EssentialsXHook essentialsXHook = HookManager.get().getEssentialsXHook();
+        SuperVanishHook superVanishHook = HookManager.get().getSuperVanishHook();
+        PlayerManager playerManager = new PlayerManager();
+
+        boolean isNormal = Settings.chatformat_type.equalsIgnoreCase("normal");
+        boolean isGroup = Settings.chatformat_type.equalsIgnoreCase("group");
+        boolean isNone = Settings.chatformat_type.equalsIgnoreCase("none");
+
+        if(Util.isVanished(p)){
+            e.setQuitMessage(null);
+            return;
+        }
+
+        if (superVanishHook.isEnabled()){
+            if (superVanishHook.isVanishPlayer(p)){
+                e.setQuitMessage(null);
+                return;
+            }
+        }
+
+        if (essentialsXHook.isEnabled()) {
+            if (Settings.hook_essentials_hidePlayerVanish) {
+                if (essentialsXHook.isVanish(p)) {
+                    e.setQuitMessage(null);
+                    return;
+                }
+            }
+        }
+
+        if (Settings.quit) {
+            if (isNormal) {
+                e.setQuitMessage(null);
+
+                String text = config.getString("Quit.Text");
+
+                text = Util.color(text);
+                text = Util.getVar(p, text);
+
+                MessageBuilder messageBuilder = new MessageBuilder(p, text);
+
+                if (config.getBoolean("Config.Show-Chat-In-Console")) {
+                    Logger.info(messageBuilder.getText());
+                }
+
+                boolean isHover = config.getBoolean("Quit.HoverEvent.Enabled");
+                boolean isClick = config.getBoolean("Quit.ClickEvent.Enabled");
+                boolean isSound = config.getBoolean("Quit.Sound.Enabled");
+                boolean isSoundAll = config.getBoolean("Quit.Sound.Send-To-All");
+
+                List<String> Hover_Text = config.getStringList("Quit.HoverEvent.Hover");
+
+                String isClick_Mode = config.getString("Quit.ClickEvent.Mode");
+                String Action_Command = config.getString("Quit.ClickEvent.Actions.Command");
+                String Action_Url = config.getString("Quit.ClickEvent.Actions.Url");
+                String Action_Suggest = config.getString("Quit.ClickEvent.Actions.Suggest-Command");
+                String Sound_Name = config.getString("Quit.Sound.Name");
+
+                int Sound_Volume = config.getInt("Quit.Sound.Volume");
+                float Sound_Pitch = Float.parseFloat(Objects.requireNonNull(config.getString("Quit.Sound.Pitch")));
+
+                if (isHover) {
+                    if (isClick) {
+                        assert isClick_Mode != null;
+                        if (isClick_Mode.equalsIgnoreCase("command")) {
+                            messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
+                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
+                            messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
+                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+                            messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
+                        }
+                    } else {
+                        messageBuilder.setHover(Hover_Text).sendToAll();
+                    }
+                } else {
+                    if (isClick) {
+                        assert isClick_Mode != null;
+                        if (isClick_Mode.equalsIgnoreCase("command")) {
+                            messageBuilder.setExecuteCommand(Action_Command).sendToAll();
+                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
+                            messageBuilder.setOpenURL(Action_Url).sendToAll();
+                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+                            messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
+                        }
+                    } else {
+                        messageBuilder.sendToAll();
+                    }
+                }
+
+                if (discordSRVHHook.isEnabled()) {
+                    if (Settings.hook_discordSrv_channelId.equalsIgnoreCase("none"))
+                        return;
+
+                    DiscordUtil.sendMessageBlocking(
+                            DiscordUtil.getTextChannelById(Settings.hook_discordSrv_channelId),
+                            Util.colorless(messageBuilder.getText()));
+                }
+
+                if (essentialsXDiscordHook.isEnabled()) {
+                    if (Settings.hook_essentialsDiscord_channelId.equalsIgnoreCase("none"))
+                        return;
+
+                    essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelId,
+                            Util.colorless(messageBuilder.getText()));
+                }
+
+                try {
+                    if (isSound) {
+                        if (isSoundAll) {
+                            Location location = p.getLocation();
+                            p.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+                        } else {
+                            for (Player pp : Bukkit.getOnlinePlayers()) {
+                                Location location = p.getLocation();
+                                pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+                            }
+                        }
+                    }
+                } catch (Exception ex) {
+                    Logger.warning("&eVerify that the sound name is correct or belongs to the version");
+                }
+            } else if (isGroup) {
+                e.setQuitMessage(null);
+                GroupHelper groupHelper = GroupHelper.get();
+                groupHelper.setGroup(playerManager.getGroup(p));
+                groupHelper.setDiscord(discordSRVHHook);
+                groupHelper.setEssentials(essentialsXDiscordHook);
+                groupHelper.onQuit(p, config);
+            } else if (isNone) {
+                e.setQuitMessage(null);
+            }
+        }
+    }
+
+}
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -4,7 +4,7 @@
 import com.cryptomorin.xseries.messages.Titles;
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
 import jss.customjoinandquitmessages.json.MessageBuilder;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Settings;
 import jss.customjoinandquitmessages.utils.Util;
 import org.bukkit.configuration.file.FileConfiguration;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,6 @@
 package jss.customjoinandquitmessages.manager;
 
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
-import jss.customjoinandquitmessages.utils.Logger;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
@@ -25,10 +24,6 @@
     }
 
     public boolean existsGroup(String group) {
-        if(group != null){
-            Logger.error("&cGroup could not be found: &e" + group);
-            return false;
-        }
         return getGroupList().contains(group);
     }
 
@@ -112,13 +107,12 @@
         return null;
     }
 
-
     public boolean isTitle(String group){
-        boolean istitle = false;
+        boolean isTitle = false;
         if (existsGroup(group)) {
-            istitle = config.getBoolean(group + ".Title.Enabled");
+            isTitle = config.getBoolean(group + ".Title.Enabled");
         }
-        return istitle;
+        return isTitle;
     }
 
     public String getTitle(String group){
@@ -157,11 +151,11 @@
     }
 
     public boolean isActionbar(String group){
-        boolean isactionbar = false;
+        boolean isActionBar = false;
         if(existsGroup(group)) {
-            isactionbar = config.getBoolean(group + ".Actionbar.Enabled");
+            isActionBar = config.getBoolean(group + ".Actionbar.Enabled");
         }
-        return isactionbar;
+        return isActionBar;
     }
 
     public String getActionbar(String group){
@@ -172,19 +166,19 @@
     }
 
     public boolean isSound(String group) {
-        boolean issound = false;
+        boolean isSound = false;
         if(existsGroup(group)) {
-            issound = config.getBoolean(group + "Sound.Enabled");
+            isSound = config.getBoolean(group + "Sound.Enabled");
         }
-        return issound;
+        return isSound;
     }
 
     public boolean isSoundAll(String group){
-        boolean issoundall = false;
+        boolean isSoundAll = false;
         if(existsGroup(group)){
-            issoundall = config.getBoolean(group + "Sound.Send-To-All");
+            isSoundAll = config.getBoolean(group + "Sound.Send-To-All");
         }
-        return issoundall;
+        return isSoundAll;
     }
 
     public String getSound(String group){
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/storage/PlayerJsonStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/storage/PlayerJsonStorage.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/storage/PlayerJsonStorage.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/storage/PlayerJsonStorage.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/storage/PlayerJsonStorage.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -31,7 +31,7 @@
                 e.printStackTrace();
             }
         }else {
-            System.out.println("archivo no existe, se procede a crearlo");
+
             try{
                 file.createNewFile();
                 FileWriter writer = new FileWriter(file);
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -3,7 +3,7 @@
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
-import jss.customjoinandquitmessages.utils.Logger;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import jss.customjoinandquitmessages.utils.Util;
 import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
@@ -28,12 +28,12 @@
             if (plugin.getDescription().getVersion().equalsIgnoreCase(version)) {
                 Logger.success("&a" + plugin.name + " is up to date!");
             } else {
-                Logger.outLine("&5<||" + Util.setLine("&5"));
+                Logger.outLine("&5<||" + Util.setLine());
                 Logger.warning("&5<||&b" + plugin.name + " is outdated!");
                 Logger.warning("&5<||&bNewest version: &a" + version);
                 Logger.warning("&5<||&bYour version: &d" + UpdateSettings.VERSION);
                 Logger.warning("&5<||&bUpdate Here on Github: &e" + UpdateSettings.URL_PlUGIN[1]);
-                Logger.outLine("&5<||" + Util.setLine("&5"));
+                Logger.outLine("&5<||" + Util.setLine());
             }
         });
     }
@@ -43,12 +43,12 @@
             if (plugin.getDescription().getVersion().equalsIgnoreCase(version)) {
                 Logger.success("&a" + plugin.name + " is up to date!");
             } else {
-                Logger.outLine("&5<||" + Util.setLine("&5"));
+                Logger.outLine("&5<||" + Util.setLine());
                 Logger.warning("&5<||&b" + plugin.name + " is outdated!");
                 Logger.warning("&5<||&bNewest version: &a" + version);
                 Logger.warning("&5<||&bYour version: &d" + UpdateSettings.VERSION);
                 Logger.warning("&5<||&bUpdate Here on Spigot: &e" + UpdateSettings.URL_PlUGIN[0]);
-                Logger.outLine("&5<||" + Util.setLine("&5"));
+                Logger.outLine("&5<||" + Util.setLine());
             }
         });
     }
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -7,6 +7,7 @@
 import jss.customjoinandquitmessages.hook.EssentialsXDiscordHook;
 import jss.customjoinandquitmessages.json.MessageBuilder;
 import jss.customjoinandquitmessages.manager.GroupManager;
+import jss.customjoinandquitmessages.utils.logger.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Sound;
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/InventoryView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/InventoryView.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/InventoryView.java
rename from CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/InventoryView.java
rename to CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/InventoryView.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/InventoryView.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/InventoryView.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,4 +1,4 @@
-package jss.customjoinandquitmessages.manager;
+package jss.customjoinandquitmessages.utils;
 
 import org.bukkit.entity.Player;
 
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Logger.java
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Logger.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Logger.java
deleted file mode 100644
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Logger.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ /dev/null	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
@@ -1,31 +0,0 @@
-package jss.customjoinandquitmessages.utils;
-
-public class Logger {
-
-    public static void error(String msg) {
-        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8-> &e[&cERROR&e] &7" + msg);
-    }
-
-    public static void warning(String msg) {
-        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8-> &e[&dWARNING&e] &7" + msg);
-    }
-
-    public static void info(String msg) {
-        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8-> &e[&9INFO&e] &7" + msg);
-    }
-
-    public static void outLine(String msg) {
-        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8-> &e[&bOUTLINE&e] &7" + msg);
-    }
-
-    public static void success(String msg) {
-        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8-> &e[&aSUCCESS&e] &7" + msg);
-    }
-
-    public static void debug(String msg) {
-        if(Settings.settings_debug) {
-            Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8-> &e[&dDEBUG&e] &7" + msg);
-        }
-    }
-
-}
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -7,14 +7,13 @@
     public static String messages_prefix;
     public static boolean hook_luckperms_autoUpdate_group;
     //Others
-    public static String defaultLanguage;
+    public static String settings_defaultLanguage;
     public static boolean is_Group_Display;
-    public static boolean update;
-    public static String c_type;
+    public static boolean settings_update;
+    public static String chatformat_type;
     public static boolean settings_debug;
 
     //Join section
-
     public static boolean join;
     public static String join_message;
 
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java
--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -22,8 +22,8 @@
     private final static String prefix = getPrefix(true);
     private static final String PERMISSION_PREFIX = "cjm.";
 
-    public static @NotNull String setLine(String color) {
-        return color(color + "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
+    public static @NotNull String setLine() {
+        return color("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
     }
 
     public static @NotNull String color(String text) {
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/FileLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/FileLogger.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/FileLogger.java
new file mode 100644
--- /dev/null	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/FileLogger.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -0,0 +1,83 @@
+package jss.customjoinandquitmessages.utils.logger;
+
+import jss.customjoinandquitmessages.CustomJoinAndQuitMessages;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.*;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
+public class FileLogger {
+
+    private static final CustomJoinAndQuitMessages plugin = CustomJoinAndQuitMessages.get();
+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
+    private static final String LOG_DIRECTORY = "plugins/CustomJoinAndQuitMessages/logs";
+
+    private static void log(String message, Throwable exception) {
+        String logFileName = LOG_DIRECTORY + "/" + getLogFileName();
+        String logMessage = "[" + LocalDateTime.now().format(DATE_TIME_FORMATTER) + "] " + message + System.lineSeparator();
+        String stackTrace = "";
+
+        if (exception != null) {
+            StringWriter sw = new StringWriter();
+            PrintWriter pw = new PrintWriter(sw);
+            exception.printStackTrace(pw);
+            stackTrace = sw.toString();
+        }
+
+        File logFile = new File(logFileName);
+        boolean fileExists = logFile.exists();
+
+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(logFileName, true))) {
+            if (!fileExists) {
+                //noinspection ResultOfMethodCallIgnored
+                logFile.createNewFile();
+                createHeadFile(writer);
+            }
+
+            writer.write(logMessage.replaceAll("&[0-9a-fA-Fklmnor]", ""));
+            writer.write(stackTrace);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static void logError(String message, Exception e) {
+        log("[ERROR] " + message, e);
+    }
+
+    public static void logWarning(String message) {
+        log("[WARNING] " + message, null);
+    }
+
+    public static void logInfo(String message) {
+        log("[INFO] " + message, null);
+    }
+
+    public static void logOutLine(String message) {
+        log("[OUTLINE] " + message, null);
+    }
+
+    public static void logSuccess(String message) {
+        log("[SUCCESS] " + message, null);
+    }
+
+    public static void logDebug(String message) {
+        log("[DEBUG] " + message, null);
+    }
+
+    private static void createHeadFile(@NotNull BufferedWriter writer) throws IOException {
+        writer.write("Plugin version: " + plugin.version + System.lineSeparator());
+        writer.write("Java version: " + System.getProperty("java.version") + System.lineSeparator());
+        writer.write("Server software: " + Bukkit.getServer().getName() + " " + Bukkit.getServer().getVersion() + System.lineSeparator());
+        writer.write("------------------------------" + System.lineSeparator());
+        writer.write(System.lineSeparator());
+    }
+
+    private static @NotNull String getLogFileName() {
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
+        return LocalDateTime.now().format(formatter) + ".log";
+    }
+
+}
Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/Logger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/Logger.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/Logger.java
new file mode 100644
--- /dev/null	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
+++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/logger/Logger.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -0,0 +1,44 @@
+package jss.customjoinandquitmessages.utils.logger;
+
+import jss.customjoinandquitmessages.utils.EventUtils;
+import jss.customjoinandquitmessages.utils.Settings;
+import jss.customjoinandquitmessages.utils.Util;
+
+public class Logger {
+
+    public static void error(String msg) {
+        try{
+            Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8: &e[&cERROR&e] &7" + msg);
+        }catch (Exception e){
+            FileLogger.logError(msg, e);
+        }
+    }
+
+    public static void warning(String msg) {
+        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8: &e[&dWARNING&e] &7" + msg);
+        FileLogger.logWarning(msg);
+    }
+
+    public static void info(String msg) {
+        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8: &e[&9INFO&e] &7" + msg);
+        FileLogger.logInfo(msg);
+    }
+
+    public static void outLine(String msg) {
+        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8: &e[&bOUTLINE&e] &7" + msg);
+        FileLogger.logOutLine(msg);
+    }
+
+    public static void success(String msg) {
+        Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8: &e[&aSUCCESS&e] &7" + msg);
+        FileLogger.logSuccess(msg);
+    }
+
+    public static void debug(String msg) {
+        if(Settings.settings_debug) {
+            Util.sendColorConsoleMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&8: &e[&dDEBUG&e] &7" + msg);
+            FileLogger.logDebug(msg);
+        }
+    }
+
+}
Index: CustomJoinAndQuitMessagesOld/src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml b/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml
--- a/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -64,7 +64,7 @@
 
     # |Channel-ID| Here is the id of the channel that is used for the chat
     Channel-ID: 'none'
-  #
+
   # |Essentials|
   Essentials:
     
@@ -254,6 +254,7 @@
   # |Enabled| Here you can enable or disable this feature
   Enabled: true
 
+  #
   UsePerGroupWelcome: false
 
   # |Text| here you can set your own welcome message when entering
Index: bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/DisplayCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/DisplayCommand.java b/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/DisplayCommand.java
--- a/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/DisplayCommand.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/DisplayCommand.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -3,12 +3,18 @@
 import jss.customjoinandquitmessage.commands.utils.SubCommand;
 import org.bukkit.command.CommandSender;
 
+@SuppressWarnings("unused")
 public class DisplayCommand extends SubCommand {
 
     public String name() {
         return "display";
     }
 
+    @Override
+    public String permission() {
+        return null;
+    }
+
 
     public void onCommand(CommandSender sender, String[] args) {
 
Index: bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/ReloadCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/ReloadCommand.java b/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/ReloadCommand.java
--- a/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/ReloadCommand.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/ReloadCommand.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -9,6 +9,11 @@
         return "reload";
     }
 
+    @Override
+    public String permission() {
+        return null;
+    }
+
 
     public void onCommand(CommandSender sender, String[] args) {
 
Index: bukkit/src/main/java/jss/customjoinandquitmessage/files/LangFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/files/LangFile.java b/bukkit/src/main/java/jss/customjoinandquitmessage/files/LangFile.java
--- a/bukkit/src/main/java/jss/customjoinandquitmessage/files/LangFile.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/files/LangFile.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -8,16 +8,19 @@
 import java.io.File;
 import java.util.Locale;
 
+@SuppressWarnings("ALL")
 public class LangFile {
 
-    private CustomJoinAndQuitMessage plugin;
+    private final CustomJoinAndQuitMessage plugin;
     private FileConfiguration config;
     private File file;
+
     private final Locale localeObj;
     private final String localeName;
-    private final int index;
+    private int index;
 
-    public LangFile(@NotNull String localeName, int index){
+    public LangFile(CustomJoinAndQuitMessage plugin, @NotNull String localeName, int index){
+        this.plugin = plugin;
         this.index = index;
         this.localeName = localeName;
         getConfig(localeName);
@@ -25,7 +28,6 @@
         localeObj = new Locale(localeName.substring(0,2),localeName.substring(3,5));
     }
 
-
     public FileConfiguration getConfig(final String name) {
         if(config == null){
             reload(name);
@@ -61,25 +63,4 @@
 
     }
 
-    public String getLocaleName() {
-        return this.localeName;
-    }
-
-    public String getLanguageName() {
-        if (localeObj == null) {
-            return "unknown";
-        }
-        return localeObj.getDisplayLanguage(localeObj);
-    }
-
-    public String getCountryName() {
-        if (localeObj == null) {
-            return "unknown";
-        }
-        return localeObj.getDisplayCountry(localeObj);
-    }
-
-    public int getIndex() {
-        return index;
-    }
 }
Index: bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/FileList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/FileList.java b/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/FileList.java
--- a/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/FileList.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/FileList.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -24,7 +24,7 @@
 
         List<String> result = new ArrayList<>();
 
-        File dir = new File(plugin.getDataFolder(), "lang");
+        File dir = new File(plugin.getDataFolder(), "langs");
 
         if(dir.exists()){
 
Index: bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/PreConfigLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/PreConfigLoader.java b/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/PreConfigLoader.java
--- a/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/PreConfigLoader.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/files/utils/PreConfigLoader.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,5 +1,6 @@
 package jss.customjoinandquitmessage.files.utils;
 
+import jss.customjoinandquitmessage.CustomJoinAndQuitMessage;
 import jss.customjoinandquitmessage.files.LangFile;
 
 import java.io.IOException;
@@ -7,6 +8,9 @@
 
 public class PreConfigLoader {
 
+    private final CustomJoinAndQuitMessage plugin = CustomJoinAndQuitMessage.get();
+
+    @SuppressWarnings("unused")
     public void loadConfigs(){
         Settings.config_Lang = "en_US";
     }
@@ -18,7 +22,7 @@
 
         try {
             for(String code : fileList.list()){
-                availableLangs.put(code, new LangFile(code, index++));
+                availableLangs.put(code, new LangFile(plugin, code, index++));
             }
         } catch (IOException e) {
             throw new RuntimeException(e);
@@ -26,7 +30,7 @@
 
         if(!availableLangs.containsKey(Settings.config_Lang)){
             Settings.config_Lang = "en_US";
-            availableLangs.put(Settings.config_Lang, new LangFile(Settings.config_Lang,0));
+            availableLangs.put(Settings.config_Lang, new LangFile(plugin, Settings.config_Lang,0));
         }
         return true;
     }
Index: bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/JoinListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/JoinListener.java b/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/JoinListener.java
--- a/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/JoinListener.java	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/JoinListener.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -3,7 +3,6 @@
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerJoinEvent;
-import org.bukkit.event.player.PlayerQuitEvent;
 
 public class JoinListener implements Listener {
 
@@ -15,11 +14,7 @@
     }
 
     @EventHandler
-    public void onQuit(PlayerQuitEvent e){
-
-    }
-
-    private void onUpdate(){
+    private void onUpdate(PlayerJoinEvent e){
 
     }
 
Index: bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/QuitListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/QuitListener.java b/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/QuitListener.java
new file mode 100644
--- /dev/null	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
+++ b/bukkit/src/main/java/jss/customjoinandquitmessage/listeners/chat/QuitListener.java	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -0,0 +1,14 @@
+package jss.customjoinandquitmessage.listeners.chat;
+
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerQuitEvent;
+
+public class QuitListener implements Listener {
+
+    @EventHandler
+    public void onQuit(PlayerQuitEvent e){
+
+    }
+
+}
Index: bukkit/src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/resources/config.yml b/bukkit/src/main/resources/config.yml
--- a/bukkit/src/main/resources/config.yml	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/resources/config.yml	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,30 +1,153 @@
+#    ______    _____   ____    __  ___
+#   / ____/   / /   | / __ \  /  |/  /
+#  / /   __  / / /| |/ / / / / /|_/ /  By jonagamerpro1234
+# / /___/ /_/ / ___ / /_/ / / /  / /   Version ${project.version}
+# \____/\____/_/  |_\___\_\/_/  /_/    Thanks for using CustomJoinAndQuitMessage <3
+#
+# ● A simple plugin for personalization of the join and quit messages and more...
+#
+# ● Spigot: https://www.spigotmc.org/resources/custom-join-and-quit-message-1-8-x-1-19-x.57006/
+# ● Discord: https://discord.gg/c5GhQDQCK5
+# ● Issue Tracker: https://github.com/jonagamerpro1234/CustomJoinAndQuitMessages/issues
+# ● Plugin Statistics: https://bstats.org/plugin/bukkit/CustomJoinAndQuitMessages/6318
+
+# | Settings |
+Settings:
+
+  # Shows you important information about the plugin loading
+  Debug: true
+
+  # You can use the available languages of the plugin, or you can add your own translations [ Default = en_US ]
+  Lang: en_US
+
+  # This function lets you know if there is a plugin update [Does not disable console messages]
+  Update:
+
+    # Here you can enable or disable this feature
+    Enabled: true
+
+    # You will get the updates from [spigot | github] what is the difference, here below is the explanation of why
+    # |Spigot| Get only released updates, and you won't receive beta notifications
+    # |GitHub| Get only the released and beta updates, and you will be able to receive notifications of both versions
+    GetFromUpdate: spigot
+
+# | Hooks |
+Hooks:
+
+  # Here you can configure everything related to LuckPerms and or deactivate or activate functions
+  LuckPerms:
+
+    # Here you can enable or disable this feature
+    Enabled: true
+
+    # This function allows the plugin to detect if the player has changed rank in a period of time defined in the [Tick] section
+    AutoUpdateGroup:
+
+      # Here you can enable or disable this feature
+      Enabled: true
+
+      # Here you can define the time that the actions are automatically executed [Default = 600], 600 tick = 30 sec
+      Tick: 600
+
+  # Here you can define the discord channel where the messages from minecraft to discord are seen
+  DiscordSVR:
+
+    # Here you can enable or disable this feature
+    Enabled: true
+
+    # Here is the id of the channel that is used for the chat
+    Channel-Id: "none"
+
+  # Aqui podras cambiar los ajustes de cada implementacion que funciona con EssentialsX
+  EssentialsX:
 
-Lang: en-US
+    # This allows you to join or quit the server without the message being shown to other players.
+    HidePlayerIsVanish: true
 
+    # Here you can define the discord channel where the messages from minecraft to discord are seen
+    # (!) Es necesario tener el plugin de [ EssentialsDiscord ] para que funcione bien todo
+    EssentialsDiscord:
 
+      # Here you can enable or disable this feature
+      Enabled: true
+
+      # Here is the id of the channel that is used for the chat
+      Channel-Id: "none"
+
+      # Usara el canal que se encuentra definido en la configuracion del plugin EssentialsDiscord y ignorara el Channel-Id de CustomJoinAndMessages
+      UseDefaultChannel: false
+
+
+# | ChatFormat |
+# Aqui pordras personalizar los mensajes de entrada y salida del jugador y tambien podras personalizar los mensajes con diversas funciones
+# (!) Para personalizacion de grupos es necesario que cambie el tipo a [ group ]
 ChatFormat:
 
   # Esta funcion desactiva el formato personalizado del plugin y usa el metodo setFormat de spigot, pero no funcionaran los eventos de Hover y Click
   # [!] Esto permite tener una mejor compatibilidad con otros plugins pero deshabilita algunas funciones del plugin
+  # [!] Esta funcion es experimental, lo que significa que puede sufrir varios cambios o incluso puede ser eliminada definitivamente
   UsaLegacyFormat: false
 
+  # Here you can enable or disable the chat to be seen in the console
+  ShowChatInConsole: true
+
+  # Aqui podras configurar el tipo del formato los cuales son
+  # |normal| Sirve para la personalizacion general de todos los jugadores de los mensajes de entrada y salida, esto no permite usar las funciones de grupo
+  # |group| Sirve para la personalizacion por gropu y desabilita la personalizacion general y permite una personalizacion mejor para cada grupo
+  # (!) Es necesario tener LuckPerms para usar la personalizacion de grupo
+  Type: normal
+
+  # | Join |
   Join:
 
+    # Here you can enable or disable this feature
     Enabled: true
 
-    Format: ""
+    # Aqui puedes definir el mensaje de entra
+    Format: "&e[&a+&e] &3{player} &7has joined the server"
 
+  # | First Join |
   First-Join:
 
+    # Here you can enable or disable this feature
     Enabled: true
 
-    Format: ""
+    Format: "&3Welcome to the server, we hope you enjoy your time here and have a good time"
 
+  # | Quit |
   Quit:
 
+    # Here you can enable or disable this feature
     Enabled: true
 
-    Format:
+    # Aqui puedes definir el mensaje de salida
+    Format: "&e[&c-&e] &3{player} &7has left the server"
+
+# |Welcome|
+Welcome:
+
+  # Here you can enable or disable this feature
+  Enabled: true
+
+  # Permite usa un mensaje de bienvenida por grupo y desactiva el mensaje general de bienvenida
+  UsePerGroupWelcome: false
 
+  # Here you can set your own welcome message when entering
+  Text:
+    - '<GRADIENT:8200FC>&m=========================================</GRADIENT:00FC95>&r'
+    - '<0>'
+    - '&e> &7Welcome To The Server &b<name>'
+    - '<0>'
+    - '&e> &cShop: shop-example.com'
+    - '&e> &7Use &b/skin to put on a skin'
+    - '<0>'
+    - '<GRADIENT:8200FC>&m=========================================</GRADIENT:00FC95>&r'
 
-File-Version: 1
\ No newline at end of file
+# I would not change anything
+File-Version: 4
+
+# |> This is the end of the configuration... [-_-] more things coming soon
+#
+# | Config File  |
+# | Version 1.8  |
+#
\ No newline at end of file
Index: bukkit/src/main/resources/groups.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/resources/groups.yml b/bukkit/src/main/resources/groups.yml
new file mode 100644
--- /dev/null	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
+++ b/bukkit/src/main/resources/groups.yml	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -0,0 +1,128 @@
+default:
+
+  HideOtherGroups:
+
+    Enabled: true
+
+    List:
+      - admin
+
+  Welcome:
+
+    Enabled: true
+
+    Text:
+      - ""
+
+  FirstJoin:
+
+    Enabled: true
+
+    Message: ""
+
+  Join:
+
+    Enabled: true
+
+    JoinMessage: "[+] {player} {group}"
+
+    HoverEvent:
+
+      Enabled: true
+
+      #
+      HoverText:
+        - ""
+        - ""
+        - ""
+
+      #
+      ClickEvent:
+
+        #
+        Enabled: true
+
+        #
+        Actions:
+          - "[EXECUTE]: /cjm help"
+          - "[SUGGEST]: /cjm"
+          - "[OPEN_URL]: ---"
+
+      Title:
+
+        Enabled: true
+
+        Title: ""
+
+        SubTitle: ""
+
+        FadeIn: 20
+
+        Stay: 80
+
+        FadeOut: 20
+
+      ActionBar:
+
+        Enabled: true
+
+        Message: ""
+
+      Sound:
+
+        Enabled: true
+
+        SendToAll: true
+
+        # This is the name of the sound you will hear when it is mentioned to you in chat.
+        Name: 'BLOCK_NOTE_BLOCK_PLING'
+
+        # This is the pitch of the sound that you will hear when mentioned in the chat
+        Pitch: 1
+
+        # This is the volume of the sound that you will hear when the chat mentions it
+        Volume: 10
+
+  Quit:
+
+    Enabled: true
+
+    QuitMessage: "[-] {player} {group}"
+
+    HoverEvent:
+
+      Enabled: true
+
+      #
+      HoverText:
+        - ""
+        - ""
+        - ""
+
+      #
+      ClickEvent:
+
+        #
+        Enabled: true
+
+        #
+        Actions:
+          - "[EXECUTE]: /cjm help"
+          - "[SUGGEST]: /cjm"
+          - "[OPEN_URL]: ---"
+
+      Sound:
+
+        Enabled: true
+
+        # When active, the sound will be sent to all players connected to the server
+        SendToAll: true
+
+        # This is the name of the sound you will hear when it is mentioned to you in chat.
+        Name: 'BLOCK_NOTE_BLOCK_PLING'
+
+        # This is the pitch of the sound that you will hear when mentioned in the chat
+        Pitch: 1
+
+        # This is the volume of the sound that you will hear when the chat mentions it
+        Volume: 10
\ No newline at end of file
Index: bukkit/src/main/resources/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bukkit/src/main/resources/plugin.yml b/bukkit/src/main/resources/plugin.yml
--- a/bukkit/src/main/resources/plugin.yml	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+++ b/bukkit/src/main/resources/plugin.yml	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -1,7 +1,40 @@
-name: CustomJoinAndQuitMessage
+name: CustomJoinAndQuitMessages
 version: '${project.version}'
 main: jss.customjoinandquitmessage.CustomJoinAndQuitMessage
 api-version: 1.16
-prefix: CustomJoinAndQuitMessage
+prefix: CustomJoinAndQuitMessages
 loadbefore: [ Essentials ]
-softdepend: [ PlaceholderAPI, LuckPerms, DiscordSRV, Essentials, EssentialsDiscord ]
+softdepend: [
+  PlaceholderAPI, DiscordSRV,
+  LuckPerms, EssentialsDiscord,
+  Essentials, SuperVanish,
+  PremiumVanish
+]
+
+commands:
+  customjoinandquitmessages:
+    description: the main command
+    aliases:
+      - cjm
+
+permissions:
+  cjm.admin:
+    description: give all permission of plugin
+    children:
+      cjm.update: true
+      cjm.command.reload: true
+      cjm.command.help: true
+      cjm.command.tabcomplete: true
+    default: op
+  cjm.update:
+    description: allows you to receive notifications of available updates
+    default: op
+  cjm.command.reload:
+    description: allows to use the reload command
+    default: op
+  cjm.command.help:
+    description: gives access to the plugin help command
+    default: op
+  cjm.command.tabcomplete:
+    description: allows you to see the list of available commands
+    default: op
Index: patches/Update_config.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/patches/Update_config.patch b/patches/Update_config.patch
new file mode 100644
--- /dev/null	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
+++ b/patches/Update_config.patch	(revision d95eeb4f788d3a38a9488e0142510ed0a4a880ef)
@@ -0,0 +1,1807 @@
+Index: CustomJoinAndQuitMessagesOld/src/main/resources/config.yml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml b/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml
+--- a/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml	(revision e3e6f528ca2c93af4251b9955aa457aff0fd3a62)
++++ b/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+@@ -13,7 +13,7 @@
+ #
+ Config:
+ 
+-  # |Lang| you can use the available languages of the plugin, or you can add your own translations [ Default = en-US ]
++  # |Lang| you can use the available languages of the plugin, or you can add your own translations [ Default = en_US ]
+   Lang: en_US
+   
+   # |Update| This function lets you know if there is a plugin update [Does not disable console messages]
+Index: patches/Removed_method_getType_of_the_GroupManager_class.patch
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/patches/Removed_method_getType_of_the_GroupManager_class.patch b/patches/Removed_method_getType_of_the_GroupManager_class.patch
+new file mode 100644
+--- /dev/null	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
++++ b/patches/Removed_method_getType_of_the_GroupManager_class.patch	(revision 3ebdfb92a2bbde47af6d6a9c7eaa2d8195f92df5)
+@@ -0,0 +1,1780 @@
++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java
++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java	(revision 6f51455f26ef7aad69f1b9446a2a31237d1f5040)
+++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/GroupManager.java	(revision e3e6f528ca2c93af4251b9955aa457aff0fd3a62)
++@@ -77,11 +77,11 @@
++     }
++ 
++     public boolean isClick(String group) {
++-        boolean isclick = false;
+++        boolean isClick = false;
++         if (existsGroup(group)) {
++-            isclick = config.getBoolean(group + ".ClickEvent.Enabled");
+++            isClick = config.getBoolean(group + ".ClickEvent.Enabled");
++         }
++-        return isclick;
+++        return isClick;
++     }
++ 
++     public String getClickMode(String group) {
++@@ -112,12 +112,6 @@
++         return null;
++     }
++ 
++-    public String getType(String group){
++-        if (existsGroup(group)) {
++-            return config.getString(group + ".Type");
++-        }
++-        return null;
++-    }
++ 
++     public boolean isTitle(String group){
++         boolean istitle = false;
++Index: patches/Fixed_PlayerStorageData.patch
++IDEA additional info:
++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++<+>UTF-8
++===================================================================
++diff --git a/patches/Fixed_PlayerStorageData.patch b/patches/Fixed_PlayerStorageData.patch
++new file mode 100644
++--- /dev/null	(revision e3e6f528ca2c93af4251b9955aa457aff0fd3a62)
+++++ b/patches/Fixed_PlayerStorageData.patch	(revision e3e6f528ca2c93af4251b9955aa457aff0fd3a62)
++@@ -0,0 +1,1734 @@
+++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java
+++IDEA additional info:
+++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+++<+>UTF-8
+++===================================================================
+++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java
+++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/CustomJoinAndQuitMessages.java	(revision 6f51455f26ef7aad69f1b9446a2a31237d1f5040)
+++@@ -28,7 +28,6 @@
+++ 
+++     private static CustomJoinAndQuitMessages plugin;
+++     public Metrics metrics;
+++-    public boolean useLatestversion;
+++     private final PluginDescriptionFile jss = getDescription();
+++     public String name = this.jss.getName();
+++     public String version = this.jss.getVersion();
+++@@ -46,7 +45,7 @@
+++         Util.sendLoadTitle(version);
+++         inventoryViews = new ArrayList<>();
+++ 
+++-        Util.createFolder(this,"Players");
++++        //Util.createFolder(this,"Players");
+++     }
+++ 
+++     public void onEnable() {
+++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java
+++IDEA additional info:
+++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+++<+>UTF-8
+++===================================================================
+++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java
+++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java	(revision 6f51455f26ef7aad69f1b9446a2a31237d1f5040)
+++@@ -8,8 +8,6 @@
+++ import jss.customjoinandquitmessages.json.MessageBuilder;
+++ import jss.customjoinandquitmessages.manager.HookManager;
+++ import jss.customjoinandquitmessages.manager.PlayerManager;
+++-import jss.customjoinandquitmessages.storage.PlayerData;
+++-import jss.customjoinandquitmessages.storage.PlayerJsonStorage;
+++ import jss.customjoinandquitmessages.update.UpdateChecker;
+++ import jss.customjoinandquitmessages.utils.GroupHelper;
+++ import jss.customjoinandquitmessages.utils.Logger;
+++@@ -55,13 +53,6 @@
+++             tempGroup = "default";
+++         }
+++ 
+++-        PlayerJsonStorage playerJsonStorage = new PlayerJsonStorage(plugin);
+++-        PlayerData playerData = playerJsonStorage.loadPlayerData(p.getName());
+++-
+++-        if(playerData == null){
+++-            playerJsonStorage.savePlayerData(new PlayerData(p.getName()));
+++-        }
+++-
+++         PlayerManager playerManager = new PlayerManager();
+++         playerManager.createPlayer(p, tempGroup);
+++ 
+++@@ -245,7 +236,7 @@
+++         }
+++     }
+++ 
+++-    @EventHandler
++++    @EventHandler(priority = EventPriority.HIGH)
+++     public void onQuit(@NotNull PlayerQuitEvent e) {
+++         FileConfiguration config = plugin.getConfigFile().getConfig();
+++         Player p = e.getPlayer();
+++Index: patches/Removed_types_normal_and_modify_of_Join_and_Quit_and_more_.patch
+++IDEA additional info:
+++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+++<+>UTF-8
+++===================================================================
+++diff --git a/patches/Removed_types_normal_and_modify_of_Join_and_Quit_and_more_.patch b/patches/Removed_types_normal_and_modify_of_Join_and_Quit_and_more_.patch
+++new file mode 100644
+++--- /dev/null	(revision 6f51455f26ef7aad69f1b9446a2a31237d1f5040)
++++++ b/patches/Removed_types_normal_and_modify_of_Join_and_Quit_and_more_.patch	(revision 6f51455f26ef7aad69f1b9446a2a31237d1f5040)
+++@@ -0,0 +1,1659 @@
++++Index: CustomJoinAndQuitMessagesOld/pom.xml
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/pom.xml b/CustomJoinAndQuitMessagesOld/pom.xml
++++--- a/CustomJoinAndQuitMessagesOld/pom.xml	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/pom.xml	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -9,7 +9,7 @@
++++     </parent>
++++ 
++++     <artifactId>CustomJoinAndQuitMessagesOld</artifactId>
++++-    <version>1.7.8-release</version>
+++++    <version>1.7.9-release</version>
++++ 
++++     <properties>
++++         <java.version>8</java.version>
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/commands/CustomJoinAndQuitCmd.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/commands/CustomJoinAndQuitCmd.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/commands/CustomJoinAndQuitCmd.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/commands/CustomJoinAndQuitCmd.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/commands/CustomJoinAndQuitCmd.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -58,7 +58,7 @@
++++         if (args.length >= 1) {
++++ 
++++             if (args[0].equalsIgnoreCase("help")) {
++++-                if ((j.isOp()) || (j.hasPermission("Cjm.Help"))) {
+++++                if ((j.isOp()) || (j.hasPermission("cjm.command.help"))) {
++++                     Util.sendColorMessage(j, "&5-=-=-=-=-=-=-=-=-=-=-=&6[&d" + plugin.name + "&6]&5=-=-=-=-=-=-=-=-=-=-=-");
++++                     for (String text : plugin.Locale().help_1) {
++++                         Util.sendColorMessage(j, text);
++++@@ -71,7 +71,7 @@
++++             }
++++ 
++++             if (args[0].equalsIgnoreCase("reload") || args[0].equalsIgnoreCase("rl")) {
++++-                if ((j.isOp()) || (j.hasPermission("Cjm.Reload"))) {
+++++                if ((j.isOp()) || (j.hasPermission(" cjm.command.reload"))) {
++++                     plugin.reloadAllFiles();
++++                     Util.sendColorMessage(j, Util.getPrefix(false) + plugin.Locale().reload);
++++                 } else {
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/config/utils/PreConfigLoader.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -32,7 +32,6 @@
++++             //Join
++++             Settings.join = Objects.equals(config.getString("Join.Enabled"), "true");
++++             Settings.join_message = config.getString("Join.Text");
++++-            Settings.join_type = config.getString("Join.Type");
++++ 
++++             Settings.firstjoin = Objects.equals(config.getString("Join.First-Join.Enabled"), "true");
++++             Settings.join_message_first = config.getString("Join.First-Join.Text");
++++@@ -43,9 +42,9 @@
++++             Settings.join_message_title_title = config.getString("Join.Title.Title");
++++             Settings.join_message_title_subtitle = config.getString("Join.Title.SubTitle");
++++ 
++++-            Settings.join_title_fadein = config.getInt("Join.Title.FadeIn");
+++++            Settings.join_title_fadeIn = config.getInt("Join.Title.FadeIn");
++++             Settings.join_title_stay = config.getInt("Join.Title.Stay");
++++-            Settings.join_title_fadeout = config.getInt("Join.Title.FadeOut");
+++++            Settings.join_title_fadeOut = config.getInt("Join.Title.FadeOut");
++++ 
++++             Settings.join_sound = Objects.equals(config.getString("Join.Sound.Enabled"), "true");
++++             Settings.join_sound_name = config.getString("Join.Sound.Name");
++++@@ -54,7 +53,6 @@
++++ 
++++             //Quit
++++             Settings.quit = Objects.equals(config.getString("Quit.Enabled"), "true");
++++-            Settings.quit_type = config.getString("Quit.Type");
++++             Settings.quit_message = config.getString("Quit.Text");
++++ 
++++             //Welcome
++++@@ -62,11 +60,11 @@
++++             Settings.list_welcome = config.getStringList("Welcome.Text");
++++ 
++++             //Hooks
++++-            Settings.hook_discordsrv = Objects.equals(config.getString("Hooks.DiscordSRV.Enabled"), "true");
++++-            Settings.hook_discordsrv_channelid = config.getString("Hooks.DiscordSRV.Channel-ID");
+++++            Settings.hook_discordSrv = Objects.equals(config.getString("Hooks.DiscordSRV.Enabled"), "true");
+++++            Settings.hook_discordSrv_channelId = config.getString("Hooks.DiscordSRV.Channel-ID");
++++ 
++++             Settings.hook_essentialsDiscord = Objects.equals(config.getString("Hooks.EssentialsDiscord.Enabled"), "true");
++++-            Settings.hook_essentialsDiscord_channelid = config.getString("Hooks.EssentialsDiscord.Channel-ID");
+++++            Settings.hook_essentialsDiscord_channelId = config.getString("Hooks.EssentialsDiscord.Channel-ID");
++++             Settings.hook_essentialsDiscord_use_default_channel = config.getBoolean("Hooks.EssentialsDiscord.Use-Default-Channel");
++++ 
++++             Settings.hook_luckperms = config.getBoolean("Hooks.LuckPerms.Enabled");
++++@@ -74,7 +72,7 @@
++++             Settings.hook_luckperms_autoUpdate_group_tick = config.getLong("Hooks.LuckPerms.AutoUpdateGroup.Tick");
++++ 
++++             Settings.hook_essentials = Objects.equals(config.getString("Hooks.Essentials.Enabled"), "true");
++++-            Settings.hook_essentials_hideplayervanish = config.getBoolean("Hooks.Essentials.HidePlayerIsVanish");
+++++            Settings.hook_essentials_hidePlayerVanish = config.getBoolean("Hooks.Essentials.HidePlayerIsVanish");
++++ 
++++         } catch (Exception e) {
++++             Logger.error("&cThere was an error loading the &b[PreConfigLoader]&7, please reload the plugin");
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/DiscordSRVHHook.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -1,6 +1,5 @@
++++ package jss.customjoinandquitmessages.hook;
++++ 
++++-import jss.customjoinandquitmessages.manager.HookManager;
++++ import jss.customjoinandquitmessages.utils.EventUtils;
++++ import jss.customjoinandquitmessages.utils.Logger;
++++ import jss.customjoinandquitmessages.utils.Settings;
++++@@ -10,13 +9,8 @@
++++ 
++++ public class DiscordSRVHHook implements IHook {
++++ 
++++-    private HookManager hookManager;
++++     private boolean isEnabled;
++++ 
++++-    public DiscordSRVHHook(HookManager hookManager) {
++++-        this.hookManager = hookManager;
++++-    }
++++-
++++     public void setup() {
++++         if (!Bukkit.getPluginManager().isPluginEnabled("DiscordSRV")) {
++++             Logger.warning("&eDiscordSRV not enabled! - Disable Features...");
++++@@ -24,7 +18,7 @@
++++             return;
++++         }
++++ 
++++-        if (!Settings.hook_discordsrv) {
+++++        if (!Settings.hook_discordSrv) {
++++             this.isEnabled = false;
++++             Logger.warning("&eDiscordSRV not enabled! - Disable Features...");
++++             return;
++++@@ -38,7 +32,4 @@
++++         return isEnabled;
++++     }
++++ 
++++-    public HookManager getHookManager() {
++++-        return hookManager;
++++-    }
++++ }
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/EssentialsXDiscordHook.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -1,6 +1,5 @@
++++ package jss.customjoinandquitmessages.hook;
++++ 
++++-import jss.customjoinandquitmessages.manager.HookManager;
++++ import jss.customjoinandquitmessages.utils.EventUtils;
++++ import jss.customjoinandquitmessages.utils.Logger;
++++ import jss.customjoinandquitmessages.utils.Settings;
++++@@ -12,14 +11,9 @@
++++ 
++++ public class EssentialsXDiscordHook implements IHook {
++++ 
++++-    private HookManager hookManager;
++++     private boolean isEnabled;
++++     private DiscordService service;
++++ 
++++-    public EssentialsXDiscordHook(HookManager hookManager) {
++++-        this.hookManager = hookManager;
++++-    }
++++-
++++     public void setup() {
++++         if (!Bukkit.getPluginManager().isPluginEnabled("EssentialsDiscord")) {
++++             Logger.warning("&eEssentialsDiscord not enabled! - Disable Features...");
++++@@ -43,27 +37,22 @@
++++         return isEnabled;
++++     }
++++ 
++++-    public DiscordService getService() {
++++-        return service;
++++-    }
++++-
+++++    @SuppressWarnings("unused")
++++     public void sendJoinMessage(String channelId, String message) {
++++         if (Settings.hook_essentialsDiscord_use_default_channel) {
++++             service.sendMessage(MessageType.DefaultTypes.JOIN, message, false);
++++         } else {
++++-            service.sendMessage(new MessageType(Settings.hook_essentialsDiscord_channelid), message, false);
+++++            service.sendMessage(new MessageType(Settings.hook_essentialsDiscord_channelId), message, false);
++++         }
++++     }
++++ 
+++++    @SuppressWarnings("unused")
++++     public void sendQuitMessage(String channelId, String message) {
++++         if (Settings.hook_essentialsDiscord_use_default_channel) {
++++             service.sendMessage(MessageType.DefaultTypes.LEAVE, message, false);
++++         } else {
++++-            service.sendMessage(new MessageType(Settings.hook_essentialsDiscord_channelid), message, false);
+++++            service.sendMessage(new MessageType(Settings.hook_essentialsDiscord_channelId), message, false);
++++         }
++++     }
++++ 
++++-    public HookManager getHookManager() {
++++-        return hookManager;
++++-    }
++++ }
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/listener/JoinListener.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -103,7 +103,7 @@
++++         }
++++ 
++++         if (essentialsXHook.isEnabled()) {
++++-            if (Settings.hook_essentials_hideplayervanish) {
+++++            if (Settings.hook_essentials_hidePlayerVanish) {
++++                 if (essentialsXHook.isVanish(p)) {
++++                     e.setJoinMessage(null);
++++                     return;
++++@@ -115,11 +115,10 @@
++++             if (isNormal) {
++++                 e.setJoinMessage(null);
++++ 
+++++                String text;
++++                 String join = Settings.join_message;
++++                 String firstjoin = Settings.join_message_first;
++++ 
++++-                String text;
++++-
++++                 if (Settings.firstjoin) {
++++                     if (!p.hasPlayedBefore()) {
++++                         text = firstjoin;
++++@@ -130,161 +129,106 @@
++++                     text = join;
++++                 }
++++ 
++++-                boolean isNormalType = Settings.join_type.equalsIgnoreCase("normal");
++++-                boolean isModifyType = Settings.join_type.equalsIgnoreCase("modify");
++++-
++++                 text = Util.color(Util.getVar(p, text));
++++-
++++                 MessageBuilder messageBuilder = new MessageBuilder(p, text);
++++ 
++++-                //Update Logger
++++                 if (config.getBoolean("Config.Show-Chat-In-Console")) {
++++                     Logger.info(messageBuilder.getText());
++++                 }
++++ 
++++-                if (isNormalType) {
++++-                    e.setJoinMessage(text);
++++-                    if (discordSRVHHook.isEnabled()) {
++++-
++++-                        if (Settings.hook_discordsrv_channelid.equalsIgnoreCase("none"))
++++-                            return;
++++-
++++-                        DiscordUtil.sendMessageBlocking(
++++-                                DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
++++-
++++-                    if (essentialsXDiscordHook.isEnabled()) {
++++-                        if (Settings.hook_essentialsDiscord_channelid.equalsIgnoreCase("none"))
++++-                            return;
++++-
++++-                        essentialsXDiscordHook.sendJoinMessage(Settings.hook_essentialsDiscord_channelid,
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
++++-
++++-                    //Removed IsModifyType in 1.8.0
++++-                } else if (isModifyType) {
++++-                    boolean isHover = Objects.equals(config.getString("Join.HoverEvent.Enabled"), "true");
++++-                    boolean isClick = Objects.equals(config.getString("Join.ClickEvent.Enabled"), "true");
++++-                    boolean isTitle = Objects.equals(config.getString("Join.Title.Enabled"), "true");
++++-                    boolean isSound = Objects.equals(config.getString("Join.Sound.Enabled"), "true");
++++-                    boolean isActionBar = Objects.equals(config.getString("Join.ActionBar.Enabled"), "true");
++++-                    boolean isSoundAll = Objects.equals(config.getString("Join.Sound.Send-To-All"), "true");
+++++                boolean isHover = config.getBoolean("Join.HoverEvent.Enabled");
+++++                boolean isClick = config.getBoolean("Join.ClickEvent.Enabled");
+++++                boolean isTitle = config.getBoolean("Join.Title.Enabled");
+++++                boolean isSound = config.getBoolean("Join.Sound.Enabled");
+++++                boolean isActionBar = config.getBoolean("Join.ActionBar.Enabled");
+++++                boolean isSoundAll = config.getBoolean("Join.Sound.Send-To-All");
++++ 
++++-                    List<String> Hover_Text = config.getStringList("Join.HoverEvent.Hover");
+++++                List<String> Hover_Text = config.getStringList("Join.HoverEvent.Hover");
++++ 
++++-                    String isClick_Mode = config.getString("Join.ClickEvent.Mode");
++++-                    String Action_Command = config.getString("Join.ClickEvent.Actions.Command");
++++-                    String Action_Url = config.getString("Join.ClickEvent.Actions.Url");
++++-                    String Action_Suggest = config.getString("Join.ClickEvent.Actions.Suggest-Command");
++++-
++++-                    //List<String> Action_Dev = config.getStringList("Join.ClickEvent.DevActions");
++++-
++++-                    String Title_Text = config.getString("Join.Title.Title");
++++-                    String SubTitle_Text = config.getString("Join.Title.SubTitle");
++++-                    String Actionbar_Text = config.getString("Join.ActionBar.Text");
++++-                    String Sound_Name = config.getString("Join.Sound.Name");
+++++                String isClick_Mode = config.getString("Join.ClickEvent.Mode");
+++++                String Action_Command = config.getString("Join.ClickEvent.Actions.Command");
+++++                String Action_Url = config.getString("Join.ClickEvent.Actions.Url");
+++++                String Action_Suggest = config.getString("Join.ClickEvent.Actions.Suggest-Command");
+++++                String Title_Text = config.getString("Join.Title.Title");
+++++                String SubTitle_Text = config.getString("Join.Title.SubTitle");
+++++                String Actionbar_Text = config.getString("Join.ActionBar.Text");
+++++                String Sound_Name = config.getString("Join.Sound.Name");
++++ 
++++-                    int FadeIn = config.getInt("Join.Title.FadeIn");
++++-                    int Stay = config.getInt("Join.Title.Stay");
++++-                    int FadeOut = config.getInt("Join.Title.FadeOut");
++++-                    int Sound_Volume = config.getInt("Join.Sound.Volume");
+++++                int FadeIn = config.getInt("Join.Title.FadeIn");
+++++                int Stay = config.getInt("Join.Title.Stay");
+++++                int FadeOut = config.getInt("Join.Title.FadeOut");
+++++                int Sound_Volume = config.getInt("Join.Sound.Volume");
++++ 
++++-                    float Sound_Pitch = Float.parseFloat(Objects.requireNonNull(config.getString("Join.Sound.Pitch")));
+++++                float Sound_Pitch = Float.parseFloat(Objects.requireNonNull(config.getString("Join.Sound.Pitch")));
++++ 
++++-                    if (isHover) {
++++-                        if (isClick) {
++++-                            assert isClick_Mode != null;
++++-                            if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                                messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                                messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                                messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
++++-                            }
++++-                        } else {
++++-                            messageBuilder.setHover(Hover_Text).sendToAll();
++++-                        }
++++-                    } else {
+++++                if (isHover) {
+++++                    if (isClick) {
+++++                        assert isClick_Mode != null;
+++++                        if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                            messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                            messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                            messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
+++++                        }
+++++                    } else {
+++++                        messageBuilder.setHover(Hover_Text).sendToAll();
+++++                    }
+++++                } else {
++++ 
++++-                        if (isClick) {
++++-
++++-                            /*for(String action : Action_Dev){
++++-
++++-                                String[] parts = action.split(":");
++++-                                String type = parts[0].trim();
++++-                                String value = parts[1].trim();
++++-
++++-                                switch (type){
++++-                                    case "[Execute]":
++++-                                        messageBuilder.setExecuteCommand(value);
++++-                                        break;
++++-                                    case "[Suggest]":
++++-                                        messageBuilder.setSuggestCommand(value);
++++-                                        break;
++++-                                    case "[Open]":
++++-                                        messageBuilder.setOpenURL(value);
++++-                                        break;
++++-                                    default:
++++-                                        messageBuilder.sendToAll();
++++-                                        break;
++++-                                }
++++-                            }
++++-                            messageBuilder.sendToAll();*/
++++-
++++-                            assert isClick_Mode != null;
++++-                            if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                                messageBuilder.setExecuteCommand(Action_Command).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                                messageBuilder.setOpenURL(Action_Url).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                                messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
++++-                            }
++++-
++++-
++++-                        } else {
++++-                            messageBuilder.sendToAll();
++++-                        }
++++-                    }
+++++                    if (isClick) {
+++++                        assert isClick_Mode != null;
+++++                        if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                            messageBuilder.setExecuteCommand(Action_Command).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                            messageBuilder.setOpenURL(Action_Url).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                            messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
+++++                        }
+++++                    } else {
+++++                        messageBuilder.sendToAll();
+++++                    }
+++++                }
++++ 
++++-                    if (discordSRVHHook.isEnabled()) {
++++-                        DiscordUtil.sendMessageBlocking(
++++-                                DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
+++++                if (discordSRVHHook.isEnabled()) {
+++++                    DiscordUtil.sendMessageBlocking(
+++++                            DiscordUtil.getTextChannelById(Settings.hook_discordSrv_channelId),
+++++                            Util.colorless(messageBuilder.getText()));
+++++                }
++++ 
++++-                    if (isTitle) {
++++-                        Titles.sendTitle(p, FadeIn, Stay, FadeOut, Util.color(Util.getVar(p, Title_Text)),
++++-                                Util.color(Util.getVar(p, SubTitle_Text)));
++++-                    }
+++++                if (isTitle) {
+++++                    Titles.sendTitle(p, FadeIn, Stay, FadeOut, Util.color(Util.getVar(p, Title_Text)),
+++++                            Util.color(Util.getVar(p, SubTitle_Text)));
+++++                }
++++ 
++++-                    if (isActionBar) {
++++-                        ActionBar.sendActionBar(p, Util.color(Util.getVar(p, Actionbar_Text)));
++++-                    }
+++++                if (isActionBar) {
+++++                    ActionBar.sendActionBar(p, Util.color(Util.getVar(p, Actionbar_Text)));
+++++                }
++++ 
++++-                    try {
++++-                        if (isSound) {
++++-                            if (isSoundAll) {
++++-                                Location location = p.getLocation();
++++-                                p.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                            } else {
++++-                                for (Player pp : Bukkit.getOnlinePlayers()) {
++++-                                    Location location = p.getLocation();
++++-                                    pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                                }
++++-                            }
++++-                        }
++++-                    } catch (Exception ex) {
++++-                        Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++-                    }
+++++                try {
+++++                    if (isSound) {
+++++                        if (isSoundAll) {
+++++                            Location location = p.getLocation();
+++++                            p.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                        } else {
+++++                            for (Player pp : Bukkit.getOnlinePlayers()) {
+++++                                Location location = p.getLocation();
+++++                                pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                            }
+++++                        }
+++++                    }
+++++                } catch (Exception ex) {
+++++                    Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++                 }
+++++
+++++
++++             } else if (isGroup) {
++++                 e.setJoinMessage(null);
++++                 GroupHelper groupHelper = new GroupHelper();
++++                 groupHelper.setGroup(playerManager.getGroup(p));
++++                 groupHelper.setDiscord(discordSRVHHook);
++++                 groupHelper.setEssentials(essentialsXDiscordHook);
++++-                groupHelper.onJoin(p, config, e);
+++++                groupHelper.onJoin(p, config);
++++             } else if (isNone) {
++++                 e.setJoinMessage(null);
++++             }
++++@@ -295,7 +239,7 @@
++++     public void onUpdate(@NotNull PlayerJoinEvent e) {
++++         Player p = e.getPlayer();
++++         if (Settings.update) {
++++-            if ((p.isOp()) || (p.hasPermission("Cjm.Update.Notify"))) {
+++++            if ((p.isOp()) || (p.hasPermission("cjm.update"))) {
++++                 new UpdateChecker(CustomJoinAndQuitMessages.get()).sendSpigotUpdate();
++++             }
++++         }
++++@@ -329,7 +273,7 @@
++++         }
++++ 
++++         if (essentialsXHook.isEnabled()) {
++++-            if (Settings.hook_essentials_hideplayervanish) {
+++++            if (Settings.hook_essentials_hidePlayerVanish) {
++++                 if (essentialsXHook.isVanish(p)) {
++++                     e.setQuitMessage(null);
++++                     return;
++++@@ -341,9 +285,6 @@
++++             if (isNormal) {
++++                 e.setQuitMessage(null);
++++ 
++++-                boolean isNormalType = Objects.requireNonNull(config.getString("Quit.Type")).equalsIgnoreCase("normal");
++++-                boolean isModifyType = Objects.requireNonNull(config.getString("Quit.Type")).equalsIgnoreCase("modify");
++++-
++++                 String text = config.getString("Quit.Text");
++++ 
++++                 text = Util.color(text);
++++@@ -355,102 +296,81 @@
++++                     Logger.info(messageBuilder.getText());
++++                 }
++++ 
++++-                if (isNormalType) {
++++-                    e.setQuitMessage(text);
++++-                    if (discordSRVHHook.isEnabled()) {
++++-                        if (Settings.hook_discordsrv_channelid.equalsIgnoreCase("none"))
++++-                            return;
++++-                        DiscordUtil.sendMessageBlocking(
++++-                                DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
++++-
++++-                    if (essentialsXDiscordHook.isEnabled()) {
++++-                        if (Settings.hook_essentialsDiscord_channelid.equalsIgnoreCase("none"))
++++-                            return;
++++-                        essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelid,
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
++++-                } else if (isModifyType) {
++++-
++++-                    boolean isHover = Objects.equals(config.getString("Quit.HoverEvent.Enabled"), "true");
++++-                    boolean isClick = Objects.equals(config.getString("Quit.ClickEvent.Enabled"), "true");
++++-                    boolean isSound = Objects.equals(config.getString("Quit.Sound.Enabled"), "true");
++++-                    boolean isSoundAll = Objects.equals(config.getString("Quit.Sound.Send-To-All"), "true");
+++++                boolean isHover = config.getBoolean("Quit.HoverEvent.Enabled");
+++++                boolean isClick = config.getBoolean("Quit.ClickEvent.Enabled");
+++++                boolean isSound = config.getBoolean("Quit.Sound.Enabled");
+++++                boolean isSoundAll = config.getBoolean("Quit.Sound.Send-To-All");
++++ 
++++-                    List<String> Hover_Text = config.getStringList("Quit.HoverEvent.Hover");
+++++                List<String> Hover_Text = config.getStringList("Quit.HoverEvent.Hover");
++++ 
++++-                    String isClick_Mode = config.getString("Quit.ClickEvent.Mode");
++++-                    String Action_Command = config.getString("Quit.ClickEvent.Actions.Command");
++++-                    String Action_Url = config.getString("Quit.ClickEvent.Actions.Url");
++++-                    String Action_Suggest = config.getString("Quit.ClickEvent.Actions.Suggest-Command");
++++-                    String Sound_Name = config.getString("Quit.Sound.Name");
+++++                String isClick_Mode = config.getString("Quit.ClickEvent.Mode");
+++++                String Action_Command = config.getString("Quit.ClickEvent.Actions.Command");
+++++                String Action_Url = config.getString("Quit.ClickEvent.Actions.Url");
+++++                String Action_Suggest = config.getString("Quit.ClickEvent.Actions.Suggest-Command");
+++++                String Sound_Name = config.getString("Quit.Sound.Name");
++++ 
++++-                    int Sound_Volume = config.getInt("Quit.Sound.Volume");
++++-                    float Sound_Pitch = Float.parseFloat(Objects.requireNonNull(config.getString("Quit.Sound.Pitch")));
+++++                int Sound_Volume = config.getInt("Quit.Sound.Volume");
+++++                float Sound_Pitch = Float.parseFloat(Objects.requireNonNull(config.getString("Quit.Sound.Pitch")));
++++ 
++++-                    if (isHover) {
++++-                        if (isClick) {
++++-                            assert isClick_Mode != null;
++++-                            if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                                messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                                messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                                messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
++++-                            }
++++-                        } else {
++++-                            messageBuilder.setHover(Hover_Text).sendToAll();
++++-                        }
++++-                    } else {
++++-                        if (isClick) {
++++-                            assert isClick_Mode != null;
++++-                            if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                                messageBuilder.setExecuteCommand(Action_Command).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                                messageBuilder.setOpenURL(Action_Url).sendToAll();
++++-                            } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                                messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
++++-                            }
++++-                        } else {
++++-                            messageBuilder.sendToAll();
++++-                        }
++++-                    }
+++++                if (isHover) {
+++++                    if (isClick) {
+++++                        assert isClick_Mode != null;
+++++                        if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                            messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                            messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                            messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
+++++                        }
+++++                    } else {
+++++                        messageBuilder.setHover(Hover_Text).sendToAll();
+++++                    }
+++++                } else {
+++++                    if (isClick) {
+++++                        assert isClick_Mode != null;
+++++                        if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                            messageBuilder.setExecuteCommand(Action_Command).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                            messageBuilder.setOpenURL(Action_Url).sendToAll();
+++++                        } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                            messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
+++++                        }
+++++                    } else {
+++++                        messageBuilder.sendToAll();
+++++                    }
+++++                }
++++ 
++++-                    if (discordSRVHHook.isEnabled()) {
++++-
++++-                        if (Settings.hook_discordsrv_channelid.equalsIgnoreCase("none"))
++++-                            return;
+++++                if (discordSRVHHook.isEnabled()) {
+++++                    if (Settings.hook_discordSrv_channelId.equalsIgnoreCase("none"))
+++++                        return;
++++ 
++++-                        DiscordUtil.sendMessageBlocking(
++++-                                DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
+++++                    DiscordUtil.sendMessageBlocking(
+++++                            DiscordUtil.getTextChannelById(Settings.hook_discordSrv_channelId),
+++++                            Util.colorless(messageBuilder.getText()));
+++++                }
++++ 
++++-                    if (essentialsXDiscordHook.isEnabled()) {
++++-
++++-                        if (Settings.hook_essentialsDiscord_channelid.equalsIgnoreCase("none"))
++++-                            return;
+++++                if (essentialsXDiscordHook.isEnabled()) {
+++++                    if (Settings.hook_essentialsDiscord_channelId.equalsIgnoreCase("none"))
+++++                        return;
++++ 
++++-                        essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelid,
++++-                                Util.colorless(messageBuilder.getText()));
++++-                    }
+++++                    essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelId,
+++++                            Util.colorless(messageBuilder.getText()));
+++++                }
++++ 
++++-                    try {
++++-                        if (isSound) {
++++-                            if (isSoundAll) {
++++-                                Location location = p.getLocation();
++++-                                p.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                            } else {
++++-                                for (Player pp : Bukkit.getOnlinePlayers()) {
++++-                                    Location location = p.getLocation();
++++-                                    pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                                }
++++-                            }
++++-                        }
++++-                    } catch (Exception ex) {
++++-                        Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++-                    }
+++++                try {
+++++                    if (isSound) {
+++++                        if (isSoundAll) {
+++++                            Location location = p.getLocation();
+++++                            p.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                        } else {
+++++                            for (Player pp : Bukkit.getOnlinePlayers()) {
+++++                                Location location = p.getLocation();
+++++                                pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                            }
+++++                        }
+++++                    }
+++++                } catch (Exception ex) {
+++++                    Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++                 }
++++             } else if (isGroup) {
++++                 e.setQuitMessage(null);
++++@@ -458,13 +378,11 @@
++++                 groupHelper.setGroup(playerManager.getGroup(p));
++++                 groupHelper.setDiscord(discordSRVHHook);
++++                 groupHelper.setEssentials(essentialsXDiscordHook);
++++-                groupHelper.onQuit(p, config, e);
+++++                groupHelper.onQuit(p, config);
++++             } else if (isNone) {
++++                 e.setQuitMessage(null);
++++             }
++++         }
++++     }
++++ 
++++-
++++-
++++ }
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/DisplayManager.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -12,6 +12,7 @@
++++ 
++++ import java.util.List;
++++ 
+++++@SuppressWarnings("all")
++++ public class DisplayManager {
++++ 
++++     private final FileConfiguration config = CustomJoinAndQuitMessages.get().getConfigFile().getConfig();
++++@@ -41,8 +42,6 @@
++++             Logger.warning("&e[showFirstJoinMessage] &b-> &7This feature is disabled and you will not be able to see the preview");
++++ 
++++         String text;
++++-        boolean isNormalType;
++++-        boolean isModifyType;
++++         boolean isHover;
++++         boolean isClick;
++++         List<String> Hover_Text;
++++@@ -53,8 +52,6 @@
++++ 
++++         if (Settings.is_Group_Display) {
++++             text = groups.getString(group + ".FirstJoin.Text");
++++-            isNormalType = groups.getString(group + ".Type").equalsIgnoreCase("normal");
++++-            isModifyType = groups.getString(group + ".Type").equalsIgnoreCase("modify");
++++             isHover = groups.getString(group + ".HoverEvent.Enabled").equals("true");
++++             isClick = groups.getString(group + ".ClickEvent.Enabled").equals("true");
++++             Hover_Text = groups.getStringList(group + ".HoverEvent.Hover");
++++@@ -64,8 +61,6 @@
++++             Action_Suggest = groups.getString(group + ".ClickEvent.Actions.Suggest-Command");
++++         } else {
++++             text = Settings.join_message_first;
++++-            isNormalType = Settings.join_type.equalsIgnoreCase("normal");
++++-            isModifyType = Settings.join_type.equalsIgnoreCase("modify");
++++ 
++++             isHover = config.getString("Join.HoverEvent.Enabled").equals("true");
++++             isClick = config.getString("Join.ClickEvent.Enabled").equals("true");
++++@@ -78,34 +73,29 @@
++++ 
++++         MessageBuilder messageBuilder = new MessageBuilder(player, Util.color(Util.getVar(player, text)));
++++ 
++++-        if (isNormalType) {
++++-            messageBuilder.send();
++++-            return;
++++-        } else if (isModifyType) {
++++-            if (isHover) {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).send();
++++-                    }
++++-                } else {
++++-                    messageBuilder.setHover(Hover_Text).send();
++++-                }
++++-            } else {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setExecuteCommand(Action_Command).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setOpenURL(Action_Url).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setSuggestCommand(Action_Suggest).send();
++++-                    }
++++-                } else {
++++-                    messageBuilder.send();
++++-                }
+++++        if (isHover) {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).send();
+++++                }
+++++            } else {
+++++                messageBuilder.setHover(Hover_Text).send();
+++++            }
+++++        } else {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setExecuteCommand(Action_Command).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setOpenURL(Action_Url).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setSuggestCommand(Action_Suggest).send();
+++++                }
+++++            } else {
+++++                messageBuilder.send();
++++             }
++++         }
++++     }
++++@@ -127,8 +117,6 @@
++++ 
++++         if (Settings.is_Group_Display) {
++++             text = groups.getString(group + ".Join-Text");
++++-            isNormalType = groups.getString(group + ".Type").equalsIgnoreCase("normal");
++++-            isModifyType = groups.getString(group + ".Type").equalsIgnoreCase("modify");
++++ 
++++             isHover = groups.getString(group + ".HoverEvent.Enabled").equals("true");
++++             isClick = groups.getString(group + ".ClickEvent.Enabled").equals("true");
++++@@ -141,8 +129,6 @@
++++             Action_Suggest = groups.getString(group + ".ClickEvent.Actions.Suggest-Command");
++++         } else {
++++             text = Settings.join_message;
++++-            isNormalType = Settings.join_type.equalsIgnoreCase("normal");
++++-            isModifyType = Settings.join_type.equalsIgnoreCase("modify");
++++ 
++++             isHover = config.getString("Join.HoverEvent.Enabled").equals("true");
++++             isClick = config.getString("Join.ClickEvent.Enabled").equals("true");
++++@@ -157,34 +143,29 @@
++++ 
++++         MessageBuilder messageBuilder = new MessageBuilder(player, Util.color(Util.getVar(player, text)));
++++ 
++++-        if (isNormalType) {
++++-            messageBuilder.send();
++++-            return;
++++-        } else if (isModifyType) {
++++-            if (isHover) {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).send();
++++-                    }
++++-                } else {
++++-                    messageBuilder.setHover(Hover_Text).send();
++++-                }
++++-            } else {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setExecuteCommand(Action_Command).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setOpenURL(Action_Url).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setSuggestCommand(Action_Suggest).send();
++++-                    }
++++-                } else {
++++-                    messageBuilder.send();
++++-                }
+++++        if (isHover) {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).send();
+++++                }
+++++            } else {
+++++                messageBuilder.setHover(Hover_Text).send();
+++++            }
+++++        } else {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setExecuteCommand(Action_Command).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setOpenURL(Action_Url).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setSuggestCommand(Action_Suggest).send();
+++++                }
+++++            } else {
+++++                messageBuilder.send();
++++             }
++++         }
++++     }
++++@@ -220,8 +201,6 @@
++++             Action_Suggest = groups.getString(group + ".ClickEvent.Actions.Suggest-Command");
++++         } else {
++++             text = Settings.quit_message;
++++-            isNormalType = Settings.quit_type.equalsIgnoreCase("normal");
++++-            isModifyType = Settings.quit_type.equalsIgnoreCase("modify");
++++ 
++++             isHover = config.getString("Quit.HoverEvent.Enabled").equals("true");
++++             isClick = config.getString("Quit.ClickEvent.Enabled").equals("true");
++++@@ -236,36 +215,32 @@
++++ 
++++         MessageBuilder messageBuilder = new MessageBuilder(player, Util.color(Util.getVar(player, text)));
++++ 
++++-        if (isNormalType) {
++++-            messageBuilder.send();
++++-            return;
++++-        } else if (isModifyType) {
++++-            if (isHover) {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).send();
++++-                    }
++++-                } else {
++++-                    messageBuilder.setHover(Hover_Text).send();
++++-                }
++++-            } else {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setExecuteCommand(Action_Command).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setOpenURL(Action_Url).send();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setSuggestCommand(Action_Suggest).send();
++++-                    }
++++-                } else {
++++-                    messageBuilder.send();
++++-                }
+++++        if (isHover) {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).send();
+++++                }
+++++            } else {
+++++                messageBuilder.setHover(Hover_Text).send();
+++++            }
+++++        } else {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setExecuteCommand(Action_Command).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setOpenURL(Action_Url).send();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setSuggestCommand(Action_Suggest).send();
+++++                }
+++++            } else {
+++++                messageBuilder.send();
++++             }
++++         }
+++++
++++     }
++++ 
++++     public void showWelcomeMessage() {
++++@@ -281,7 +256,7 @@
++++         if (!Settings.join_title)
++++             Logger.warning("&e[showTitleMessage] &b-> &7This feature is disabled and you will not be able to see the preview");
++++ 
++++-        Titles.sendTitle(player, Settings.join_title_fadein, Settings.join_title_stay, Settings.join_title_fadeout, Settings.join_message_title_title, Settings.join_message_title_subtitle);
+++++        Titles.sendTitle(player, Settings.join_title_fadeIn, Settings.join_title_stay, Settings.join_title_fadeOut, Settings.join_message_title_title, Settings.join_message_title_subtitle);
++++     }
++++ 
++++     public void showActionbar() {
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/HookManager.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/HookManager.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/HookManager.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/HookManager.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/manager/HookManager.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -7,8 +7,8 @@
++++ public class HookManager {
++++ 
++++     private static HookManager instance;
++++-    private final DiscordSRVHHook discordSRVHHook = new DiscordSRVHHook(this);
++++-    private final EssentialsXDiscordHook essentialsXDiscordHook = new EssentialsXDiscordHook(this);
+++++    private final DiscordSRVHHook discordSRVHHook = new DiscordSRVHHook();
+++++    private final EssentialsXDiscordHook essentialsXDiscordHook = new EssentialsXDiscordHook();
++++     private final EssentialsXHook essentialsXHook = new EssentialsXHook(this);
++++     private final LuckPermsHook luckPermsHook = new LuckPermsHook();
++++     private final SuperVanishHook superVanishHook = new SuperVanishHook();
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/update/UpdateChecker.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -22,6 +22,7 @@
++++         this.plugin = plugin;
++++     }
++++ 
+++++    @SuppressWarnings("unused")
++++     public void sendGithubUpdate(){
++++         getVersion("github" ,version -> {
++++             if (plugin.getDescription().getVersion().equalsIgnoreCase(version)) {
++++@@ -60,7 +61,6 @@
++++                 break;
++++             case "github":
++++                 url = UpdateSettings.API_UPDATE[1];
++++-
++++                 break;
++++             default:
++++                 Logger.error("Invalid source for update check: " + source);
++++@@ -76,7 +76,7 @@
++++                         String latestRelease = scanner.next();
++++                         Gson gson = new Gson();
++++                         JsonObject json= gson.fromJson(latestRelease, JsonObject.class);
++++-                        String versionName = json.get("name").getAsString();
+++++                        String versionName = json.get("tag_name").getAsString();
++++ 
++++                         if(versionName.contains("Beta")){
++++                             Logger.info("The latest release is a beta version: " + versionName);
++++@@ -88,10 +88,7 @@
++++                     }else{
++++                         consumer.accept(scanner.next());
++++                     }
++++-
++++-
++++                 }
++++-
++++             } catch (IOException e) {
++++                 Logger.error("Could not check for updates: &c" + e.getMessage());
++++             }
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/GroupHelper.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -12,8 +12,6 @@
++++ import org.bukkit.Sound;
++++ import org.bukkit.configuration.file.FileConfiguration;
++++ import org.bukkit.entity.Player;
++++-import org.bukkit.event.player.PlayerJoinEvent;
++++-import org.bukkit.event.player.PlayerQuitEvent;
++++ import org.jetbrains.annotations.Contract;
++++ import org.jetbrains.annotations.NotNull;
++++ 
++++@@ -43,7 +41,7 @@
++++         this.essentialsXDiscordHook = essentialsXDiscordHook;
++++     }
++++ 
++++-    public void onJoin(Player player, FileConfiguration config, PlayerJoinEvent playerJoinEvent) {
+++++    public void onJoin(Player player, FileConfiguration config) {
++++         String temp = "";
++++ 
++++         String join = groupManager.getJoin(group);
++++@@ -59,126 +57,97 @@
++++ 
++++         temp = Util.color(Util.getVar(player, temp));
++++ 
++++-        boolean isNormalType = groupManager.getType(group).equalsIgnoreCase("normal");
++++-        boolean isModifyType = groupManager.getType(group).equalsIgnoreCase("modify");
++++-
++++         MessageBuilder messageBuilder = new MessageBuilder(player, temp);
++++ 
++++         if (config.getBoolean("Config.Show-Chat-In-Console")) {
++++             Logger.info(messageBuilder.getText());
++++         }
++++ 
++++-        if (isNormalType) {
++++-            playerJoinEvent.setJoinMessage(temp);
++++-            if (discordSRVHHook.isEnabled()) {
++++-
++++-                if (Settings.hook_discordsrv_channelid.equalsIgnoreCase("none"))
++++-                    return;
++++-
++++-                DiscordUtil.sendMessageBlocking(
++++-                        DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
++++-
++++-            if (essentialsXDiscordHook.isEnabled()) {
++++-                if (Settings.hook_essentialsDiscord_channelid.equalsIgnoreCase("none"))
++++-                    return;
++++-
++++-                essentialsXDiscordHook.sendJoinMessage(Settings.hook_essentialsDiscord_channelid,
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
++++-        } else if (isModifyType) {
++++-
++++-            boolean isHover = groupManager.isHover(group);
++++-            boolean isClick = groupManager.isClick(group);
++++-            boolean isTitle = groupManager.isTitle(group);
++++-            boolean isSound = groupManager.isSound(group);
++++-            boolean isActionBar = groupManager.isActionbar(group);
++++-            boolean isSoundAll = groupManager.isSoundAll(group);
+++++        boolean isHover = groupManager.isHover(group);
+++++        boolean isClick = groupManager.isClick(group);
+++++        boolean isTitle = groupManager.isTitle(group);
+++++        boolean isSound = groupManager.isSound(group);
+++++        boolean isActionBar = groupManager.isActionbar(group);
+++++        boolean isSoundAll = groupManager.isSoundAll(group);
++++ 
++++-            List<String> Hover_Text = groupManager.getHover(group);
+++++        List<String> Hover_Text = groupManager.getHover(group);
++++ 
++++-            String isClick_Mode = groupManager.getClickMode(group);
++++-            String Action_Command = groupManager.getClickCommand(group);
++++-            String Action_Url = groupManager.getClickUrl(group);
++++-            String Action_Suggest = groupManager.getClickSuggestCommand(group);
++++-            String Title_Text = groupManager.getTitle(group);
++++-            String SubTitle_Text = groupManager.getSubTitle(group);
++++-            String Actionbar_Text = groupManager.getActionbar(group);
++++-            String Sound_Name = groupManager.getSound(group);
+++++        String isClick_Mode = groupManager.getClickMode(group);
+++++        String Action_Command = groupManager.getClickCommand(group);
+++++        String Action_Url = groupManager.getClickUrl(group);
+++++        String Action_Suggest = groupManager.getClickSuggestCommand(group);
+++++        String Title_Text = groupManager.getTitle(group);
+++++        String SubTitle_Text = groupManager.getSubTitle(group);
+++++        String Actionbar_Text = groupManager.getActionbar(group);
+++++        String Sound_Name = groupManager.getSound(group);
++++ 
++++-            int FadeIn = groupManager.getFadeIn(group);
++++-            int Stay = groupManager.getStay(group);
++++-            int FadeOut = groupManager.getFadeOut(group);
++++-            int Sound_Volume = groupManager.getVolume(group);
++++-            float Sound_Pitch = groupManager.getPitch(group);
+++++        int FadeIn = groupManager.getFadeIn(group);
+++++        int Stay = groupManager.getStay(group);
+++++        int FadeOut = groupManager.getFadeOut(group);
+++++        int Sound_Volume = groupManager.getVolume(group);
+++++        float Sound_Pitch = groupManager.getPitch(group);
++++ 
++++-            if (isHover) {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
++++-                    }
++++-                } else {
++++-                    messageBuilder.setHover(Hover_Text).sendToAll();
++++-                }
++++-            } else {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setExecuteCommand(Action_Command).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setOpenURL(Action_Url).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
++++-                    }
++++-                } else {
++++-                    messageBuilder.sendToAll();
++++-                }
++++-            }
+++++        if (isHover) {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
+++++                }
+++++            } else {
+++++                messageBuilder.setHover(Hover_Text).sendToAll();
+++++            }
+++++        } else {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setExecuteCommand(Action_Command).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setOpenURL(Action_Url).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
+++++                }
+++++            } else {
+++++                messageBuilder.sendToAll();
+++++            }
+++++        }
++++ 
++++-            if (discordSRVHHook.isEnabled()) {
++++-                DiscordUtil.sendMessageBlocking(
++++-                        DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
+++++        if (discordSRVHHook.isEnabled()) {
+++++            DiscordUtil.sendMessageBlocking(
+++++                    DiscordUtil.getTextChannelById(Settings.hook_discordSrv_channelId),
+++++                    Util.colorless(messageBuilder.getText()));
+++++        }
++++ 
++++-            if (isTitle) {
++++-                Titles.sendTitle(player, FadeIn, Stay, FadeOut, Util.color(Util.getVar(player, Title_Text)),
++++-                        Util.color(Util.getVar(player, SubTitle_Text)));
++++-            }
+++++        if (isTitle) {
+++++            Titles.sendTitle(player, FadeIn, Stay, FadeOut, Util.color(Util.getVar(player, Title_Text)),
+++++                    Util.color(Util.getVar(player, SubTitle_Text)));
+++++        }
++++ 
++++-            if (isActionBar) {
++++-                ActionBar.sendActionBar(player, Util.color(Util.getVar(player, Actionbar_Text)));
++++-            }
+++++        if (isActionBar) {
+++++            ActionBar.sendActionBar(player, Util.color(Util.getVar(player, Actionbar_Text)));
+++++        }
++++ 
++++-            try {
++++-                if (isSound) {
++++-                    if (isSoundAll) {
++++-                        Location location = player.getLocation();
++++-                        player.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                    } else {
++++-                        for (Player pp : Bukkit.getOnlinePlayers()) {
++++-                            Location location = player.getLocation();
++++-                            pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                        }
++++-                    }
++++-                }
++++-            } catch (Exception ex) {
++++-                Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++-            }
+++++        try {
+++++            if (isSound) {
+++++                if (isSoundAll) {
+++++                    Location location = player.getLocation();
+++++                    player.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                } else {
+++++                    for (Player pp : Bukkit.getOnlinePlayers()) {
+++++                        Location location = player.getLocation();
+++++                        pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                    }
+++++                }
+++++            }
+++++        } catch (Exception ex) {
+++++            Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++         }
++++     }
++++ 
++++-    public void onQuit(Player player, @NotNull FileConfiguration config, PlayerQuitEvent playerQuitEvent) {
+++++    public void onQuit(Player player, @NotNull FileConfiguration config) {
++++         String quit = groupManager.getQuit(group);
++++ 
++++-
++++-        boolean isNormalType = groupManager.getType(group).equalsIgnoreCase("normal");
++++-        boolean isModifyType = groupManager.getType(group).equalsIgnoreCase("modify");
++++-
++++         quit = Util.color(Util.getVar(player, quit));
++++ 
++++         MessageBuilder messageBuilder = new MessageBuilder(player, quit);
++++@@ -186,102 +155,82 @@
++++             Logger.info(messageBuilder.getText());
++++         }
++++ 
++++-        if (isNormalType) {
++++-            playerQuitEvent.setQuitMessage(quit);
++++-            if (discordSRVHHook.isEnabled()) {
++++-                if (Settings.hook_discordsrv_channelid.equalsIgnoreCase("none"))
++++-                    return;
++++-                DiscordUtil.sendMessageBlocking(
++++-                        DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
++++-
++++-            if (essentialsXDiscordHook.isEnabled()) {
++++-                if (Settings.hook_essentialsDiscord_channelid.equalsIgnoreCase("none"))
++++-                    return;
++++-                essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelid,
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
++++-        } else if (isModifyType) {
++++-
++++-            boolean isHover = groupManager.isHover(group);
++++-            boolean isClick = groupManager.isClick(group);
++++-            boolean isSound = groupManager.isSound(group);
++++-            boolean isSoundAll = groupManager.isSoundAll(group);
+++++        boolean isHover = groupManager.isHover(group);
+++++        boolean isClick = groupManager.isClick(group);
+++++        boolean isSound = groupManager.isSound(group);
+++++        boolean isSoundAll = groupManager.isSoundAll(group);
++++ 
++++-            List<String> Hover_Text = groupManager.getHover(group);
+++++        List<String> Hover_Text = groupManager.getHover(group);
++++ 
++++-            String isClick_Mode = groupManager.getClickMode(group);
++++-            String Action_Command = groupManager.getClickCommand(group);
++++-            String Action_Url = groupManager.getClickUrl(group);
++++-            String Action_Suggest = groupManager.getClickSuggestCommand(group);
++++-            String Sound_Name = groupManager.getSound(group);
+++++        String isClick_Mode = groupManager.getClickMode(group);
+++++        String Action_Command = groupManager.getClickCommand(group);
+++++        String Action_Url = groupManager.getClickUrl(group);
+++++        String Action_Suggest = groupManager.getClickSuggestCommand(group);
+++++        String Sound_Name = groupManager.getSound(group);
++++ 
++++-            int Sound_Volume = groupManager.getVolume(group);
++++-            float Sound_Pitch = groupManager.getPitch(group);
+++++        int Sound_Volume = groupManager.getVolume(group);
+++++        float Sound_Pitch = groupManager.getPitch(group);
++++ 
++++-            if (isHover) {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
++++-                    }
++++-                } else {
++++-                    messageBuilder.setHover(Hover_Text).sendToAll();
++++-                }
++++-            } else {
++++-                if (isClick) {
++++-                    if (isClick_Mode.equalsIgnoreCase("command")) {
++++-                        messageBuilder.setExecuteCommand(Action_Command).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("url")) {
++++-                        messageBuilder.setOpenURL(Action_Url).sendToAll();
++++-                    } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
++++-                        messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
++++-                    }
++++-                } else {
++++-                    messageBuilder.sendToAll();
++++-                }
++++-            }
+++++        if (isHover) {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setHover(Hover_Text).setExecuteCommand(Action_Command).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setHover(Hover_Text).setOpenURL(Action_Url).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setHover(Hover_Text).setSuggestCommand(Action_Suggest).sendToAll();
+++++                }
+++++            } else {
+++++                messageBuilder.setHover(Hover_Text).sendToAll();
+++++            }
+++++        } else {
+++++            if (isClick) {
+++++                if (isClick_Mode.equalsIgnoreCase("command")) {
+++++                    messageBuilder.setExecuteCommand(Action_Command).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("url")) {
+++++                    messageBuilder.setOpenURL(Action_Url).sendToAll();
+++++                } else if (isClick_Mode.equalsIgnoreCase("suggest")) {
+++++                    messageBuilder.setSuggestCommand(Action_Suggest).sendToAll();
+++++                }
+++++            } else {
+++++                messageBuilder.sendToAll();
+++++            }
+++++        }
++++ 
++++-            if (discordSRVHHook.isEnabled()) {
+++++        if (discordSRVHHook.isEnabled()) {
++++ 
++++-                if (Settings.hook_discordsrv_channelid.equalsIgnoreCase("none"))
++++-                    return;
+++++            if (Settings.hook_discordSrv_channelId.equalsIgnoreCase("none"))
+++++                return;
++++ 
++++-                DiscordUtil.sendMessageBlocking(
++++-                        DiscordUtil.getTextChannelById(Settings.hook_discordsrv_channelid),
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
+++++            DiscordUtil.sendMessageBlocking(
+++++                    DiscordUtil.getTextChannelById(Settings.hook_discordSrv_channelId),
+++++                    Util.colorless(messageBuilder.getText()));
+++++        }
++++ 
++++-            if (essentialsXDiscordHook.isEnabled()) {
+++++        if (essentialsXDiscordHook.isEnabled()) {
++++ 
++++-                if (Settings.hook_essentialsDiscord_channelid.equalsIgnoreCase("none"))
++++-                    return;
+++++            if (Settings.hook_essentialsDiscord_channelId.equalsIgnoreCase("none"))
+++++                return;
++++ 
++++-                essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelid,
++++-                        Util.colorless(messageBuilder.getText()));
++++-            }
+++++            essentialsXDiscordHook.sendQuitMessage(Settings.hook_essentialsDiscord_channelId,
+++++                    Util.colorless(messageBuilder.getText()));
+++++        }
++++ 
++++-            try {
++++-                if (isSound) {
++++-                    if (isSoundAll) {
++++-                        Location location = player.getLocation();
++++-                        player.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                    } else {
++++-                        for (Player pp : Bukkit.getOnlinePlayers()) {
++++-                            Location location = player.getLocation();
++++-                            pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
++++-                        }
++++-                    }
++++-                }
++++-            } catch (Exception ex) {
++++-                Logger.warning("&eVerify that the sound name is correct or belongs to the version");
++++-            }
++++-        }
+++++        try {
+++++            if (isSound) {
+++++                if (isSoundAll) {
+++++                    Location location = player.getLocation();
+++++                    player.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                } else {
+++++                    for (Player pp : Bukkit.getOnlinePlayers()) {
+++++                        Location location = player.getLocation();
+++++                        pp.playSound(location, Sound.valueOf(Sound_Name), Sound_Volume, Sound_Pitch);
+++++                    }
+++++                }
+++++            }
+++++        } catch (Exception ex) {
+++++            Logger.warning("&eVerify that the sound name is correct or belongs to the version");
+++++        }
+++++    }
++++ 
++++-    }
++++-
++++ }
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Settings.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -14,7 +14,6 @@
++++     public static boolean settings_debug;
++++ 
++++     //Join section
++++-    public static String join_type;
++++ 
++++     public static boolean join;
++++     public static String join_message;
++++@@ -25,9 +24,9 @@
++++     public static boolean join_title;
++++     public static String join_message_title_title;
++++     public static String join_message_title_subtitle;
++++-    public static int join_title_fadein;
+++++    public static int join_title_fadeIn;
++++     public static int join_title_stay;
++++-    public static int join_title_fadeout;
+++++    public static int join_title_fadeOut;
++++ 
++++     public static boolean join_actionbar;
++++     public static String join_message_actionbar_text;
++++@@ -38,33 +37,23 @@
++++     public static int join_sound_vol;
++++ 
++++     //Quit section
++++-
++++-    public static String quit_type;
++++-
++++     public static boolean quit;
++++     public static String quit_message;
++++ 
++++-    public static boolean quit_sound;
++++-    public static String quit_sound_name;
++++-    public static float quit_sound_pitch;
++++-    public static int quit_sound_vol;
++++-
++++     //Welcome section
++++     public static boolean welcome;
++++     public static List<String> list_welcome;
++++ 
++++     //Hooks section
++++-    public static boolean hook_discordsrv;
++++-    public static boolean hook_discordsrv_use_message;
++++-    public static String hook_discordsrv_channelid;
+++++    public static boolean hook_discordSrv;
+++++    public static String hook_discordSrv_channelId;
++++ 
++++     public static boolean hook_essentials;
++++-    public static boolean hook_essentials_hideplayervanish;
+++++    public static boolean hook_essentials_hidePlayerVanish;
++++ 
++++     public static boolean hook_essentialsDiscord;
++++     public static boolean hook_essentialsDiscord_use_default_channel;
++++-    public static String hook_essentialsDiscord_channelid;
+++++    public static String hook_essentialsDiscord_channelId;
++++     public static boolean hook_luckperms;
++++-    public static boolean hook_luckperms_use_group;
++++     public static long hook_luckperms_autoUpdate_group_tick;
++++ }
++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java
++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/utils/Util.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -67,10 +67,8 @@
++++         return prefix;
++++     }
++++ 
++++-
++++     public static @NotNull List<String> setTabLimit(final @NotNull List<String> options, final String lastArgs) {
++++         final List<String> returned = new ArrayList<>();
++++-
++++         for (String s : options) {
++++             if (s == null) {
++++                 continue;
++++@@ -82,25 +80,11 @@
++++         return returned;
++++     }
++++ 
++++-    @SuppressWarnings("unused")
++++-    public static void sendTextComponentHover(@NotNull Player j, String action, String message, String subMessage, String color) {
++++-        TextComponent msg = new TextComponent(color(message));
++++-        msg.setHoverEvent(new HoverEvent(HoverEvent.Action.valueOf(getActionHoverType(action)), new ComponentBuilder(subMessage).color(ChatColor.of(color)).create()));
++++-        j.spigot().sendMessage(msg);
++++-    }
++++-
++++     public static void sendTextComponent116Hover(@NotNull Player j, String action, String message, String subMessage) {
++++         TextComponent msg = new TextComponent(color(message));
++++         msg.setHoverEvent(new HoverEvent(HoverEvent.Action.valueOf(getActionHoverType(action)), new ComponentBuilder(color(subMessage)).create()));
++++         j.spigot().sendMessage(msg);
++++     }
++++-
++++-    @SuppressWarnings("unused")
++++-    public static void sendTextComponentClick(@NotNull Player j, String action, String message, String arg0) {
++++-        TextComponent msg = new TextComponent(color(message));
++++-        msg.setClickEvent(new ClickEvent(ClickEvent.Action.valueOf(getActionClickType(action)), arg0));
++++-        j.spigot().sendMessage(msg);
++++-    }
++++ 
++++     public static void sendAllPlayerBaseComponent(BaseComponent component) {
++++         for (Player p : Bukkit.getOnlinePlayers()) {
++++@@ -120,16 +104,6 @@
++++         }
++++         return null;
++++     }
++++-
++++-    public static @Nullable String getActionClickType(@NotNull String arg) {
++++-        if (arg.equalsIgnoreCase("url")) {
++++-            return "OPEN_URL";
++++-        }
++++-        if (arg.equalsIgnoreCase("cmd")) {
++++-            return "RUN_COMMAND";
++++-        }
++++-        return null;
++++-    }
++++ 
++++     public static @NotNull String getVar(@NotNull Player player, String text) {
++++         text = text.replace("<name>", player.getName());
++++Index: CustomJoinAndQuitMessagesOld/src/main/resources/config.yml
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml b/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml
++++--- a/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/resources/config.yml	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -105,9 +105,6 @@
++++     # |Text| Here you can set the join message for the first time
++++     Text: '&6Welcome to server &a<name>&6 for the first time'
++++   
++++-  # |Type| Here you can find two types that are [ normal | modify ]
++++-  Type: modify
++++-  
++++   # |HoverEvent| This section allows you to modify the hover events in the chat
++++   HoverEvent:
++++     
++++@@ -129,12 +126,6 @@
++++     # |Mode| there are three different modes which are [ command | suggest | url ]
++++     Mode: command
++++ 
++++-    # This feature is not available yet
++++-    DevActions:
++++-      - '[Suggest]: /help'
++++-      - '[Execute]: /me hello test'
++++-      - '[Open]: https://www.spigotmc.org/resources/custom-join-and-quit-message-1-7-x-1-17-x.57006/'
++++-
++++     # |Actions| This is where are the available events that you can use
++++     Actions:
++++       
++++@@ -205,9 +196,6 @@
++++   # |Text| This is where Quit customizable message is located
++++   Text: '&b[<#:FF8E8E>-&b] <#:A157FF><name>'
++++   
++++-  # |Type| Here you can find two types that are [ normal | modify ]
++++-  Type: normal
++++-  
++++   # |HoverEvent| This section allows you to modify the hover events in the chat
++++   HoverEvent:
++++     
++++@@ -280,7 +268,7 @@
++++     - '<GRADIENT:8200FC>&m=========================================</GRADIENT:00FC95>&r'
++++ #
++++ # |File-Version|I would not change anything
++++-File-Version: 3
+++++File-Version: 4
++++ # |> This is the end of the configuration ... [-_-] more things coming soon
++++ # 
++++ # | Config File  |
++++Index: CustomJoinAndQuitMessagesOld/src/main/resources/groups.yml
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/resources/groups.yml b/CustomJoinAndQuitMessagesOld/src/main/resources/groups.yml
++++--- a/CustomJoinAndQuitMessagesOld/src/main/resources/groups.yml	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/CustomJoinAndQuitMessagesOld/src/main/resources/groups.yml	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -32,9 +32,6 @@
++++     
++++     # |Text| Here you can set the join message for the first time
++++     Text: '&6Welcome to server &a<name>&6 for the first time'
++++-
++++-  # |Type| Here you can find two types that are [ normal | modify ]
++++-  Type: modify
++++   
++++   # |HoverEvent| This section allows you to modify the hover events in the chat
++++   HoverEvent:
++++Index: bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/InfoCommand.java
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/InfoCommand.java b/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/InfoCommand.java
++++--- a/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/InfoCommand.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++++ b/bukkit/src/main/java/jss/customjoinandquitmessage/commands/subcommands/InfoCommand.java	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -9,6 +9,11 @@
++++         return "info";
++++     }
++++ 
+++++    @Override
+++++    public String permission() {
+++++        return null;
+++++    }
+++++
++++     public void onCommand(CommandSender sender, String[] args) {
++++ 
++++     }
++++Index: patches/Removed_debugging_messages_in_the_LuckPermsHook_class_.patch
++++IDEA additional info:
++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
++++<+>UTF-8
++++===================================================================
++++diff --git a/patches/Removed_debugging_messages_in_the_LuckPermsHook_class_.patch b/patches/Removed_debugging_messages_in_the_LuckPermsHook_class_.patch
++++new file mode 100644
++++--- /dev/null	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
+++++++ b/patches/Removed_debugging_messages_in_the_LuckPermsHook_class_.patch	(revision 5436229cc153c4aec4cd6267d80f1e8301022990)
++++@@ -0,0 +1,29 @@
+++++Index: CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java
+++++IDEA additional info:
+++++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+++++<+>UTF-8
+++++===================================================================
+++++diff --git a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java
+++++--- a/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java	(revision 52d1e6b32c970d5470b3f06b418c1d1ef9e3aeb1)
++++++++ b/CustomJoinAndQuitMessagesOld/src/main/java/jss/customjoinandquitmessages/hook/LuckPermsHook.java	(revision 60d9051d52d70ed86db8e0fc1a50da61f395e55a)
+++++@@ -25,19 +25,16 @@
+++++         if (!Bukkit.getPluginManager().isPluginEnabled("LuckPerms")) {
+++++             Logger.warning("&eLuckPerms not enabled! - Disable Features...");
+++++             this.isEnabled = false;
+++++-            System.out.println("Cjm Softdepend: Luckperms false - check plugin installed in plugin folder");
+++++             return;
+++++         }
+++++ 
+++++         if (!Settings.hook_luckperms) {
+++++             this.isEnabled = false;
+++++-            System.out.println("Cjm Softdepend: Luckperms false - Hook Enabled in config");
+++++-            Logger.warning("&eLuckPerms not enabled! - Disable Features...");
++++++            System.out.println("Cjm Softdepend: Luckperms false - Hook disabled in config");
+++++             return;
+++++         }
+++++ 
+++++         this.isEnabled = true;
+++++-        System.out.println("Cjm Softdepend: Luckperms true - The plugin has successfully loaded the dependency");
+++++         Util.sendColorMessage(EventUtils.getStaticConsoleSender(), Util.getPrefix(true) + "&aLoading LuckPerms features...");
+++++     }
+++++ 
